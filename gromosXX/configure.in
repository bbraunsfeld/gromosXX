dnl configure.in for GromosXX
dnl written by Markus Christen
dnl september, 2004

AC_PREREQ(2.58)

AC_INIT()
AC_CONFIG_SRCDIR(src/math/math.cc)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM
AC_MSG_RESULT([Configure gromosXX for $target])

AC_LANG(C++)

dnl include version information
sinclude([VERSION])

MD_VERSION=$MD_MAJOR_VERSION.$MD_MINOR_VERSION.$MD_MICRO_VERSION
AC_DEFINE_UNQUOTED(MD_VERSION, "$MD_VERSION", [MD version info])

CONF_DATE=`date`
AC_DEFINE_UNQUOTED(MD_DATE, "$CONF_DATE", [MD date (configure)])

echo ""
echo "GromosXX molecular dynamics program"
echo "simple molecular dynamics simulations"
echo "version ${MD_MAJOR_VERSION}.${MD_MINOR_VERSION}.${MD_MICRO_VERSION}"
echo "${CONF_DATE}, ETH Zuerich"
echo ""
echo ""

AM_INIT_AUTOMAKE(gromosXX, $MD_VERSION, no-define)
AM_CONFIG_HEADER(config.h)
dnl AC_CONFIG_HEADERS(config.h)

AM_PROG_LIBTOOL

# AM_MAINTAINER_MODE

dnl option for production builds
AC_ARG_ENABLE(debug,
  [  --disable-debug  compile without debug options],
  ,enable_debug=yes)    

AC_ARG_ENABLE(openmp,
  [  --enable-openmp	compile with openMP support],
  , enable_openmp=no)

AC_ARG_ENABLE(profile,
  [  --enable-profile	compile with profiling on],
  , enable_profile=no)

AC_ARG_ENABLE(allstatic, 
  [ --enable-allstatic  compile static-only],
  , enable_allstatic=no)

if eval "test x$enable_allstatic = xyes"; then
  LDFLAGS="$LDFLAGS -all-static"
  echo "configuring for static build"
fi

dnl check for required programs
# AC_PROG_C
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl create a symlink from src to gromosXX
AC_LINK_FILES(src, gromosXX)

dnl detect the compiler
compiler="none"
dnl need to test for intel first, as it looks nowadays
dnl suspiciously like GNU g++
if eval "test x$compiler = xnone"; then AC_PROG_CXX_INTELCC ; fi

if eval "test x$compiler = xnone"; then
	if eval "test x$GXX = xyes"; then
		compiler=gnucc
		echo "using GNU c++ compiler"
	fi
fi

if eval "test x$compiler = xnone"; then AC_PROG_CXX_KAICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SGICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MWERKS  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MSVCPP  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SUNCC   ; fi


dnl set some defaults to CXXFLAGS and LDFLAGS
extra_lib=""

dnl take out -O and -g from CXXFLAGS, CFLAGS, as these are set
dnl automagically

CXXFLAGS=`echo $CXXFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`
CFLAGS=`echo $CFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`
LDFLAGS=`echo $LDFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`

case "$compiler" in
     kai*)               # KAI C++  http://www.kai.com/
       echo "Configuring for KAI C++"
	   AC_MSG_ERROR([No compiler flags for KAI C++ provided])
     ;;
    intel*)             # Intel C++.  tested with version 8.0beta (precompiled headers)
       echo "Configuring for Intel C++"
       CXX_PICKY_FLAGS="-w1"
	   dnl consider adding -xP, -xN or -xW for Intel processors
	   dnl maybe some inline control: -Qoption,c,-ip_ninl_max_stats=2000
	   dnl or maybe -ipo if your lucky...
       dnl CXX_OPTIMIZE_FLAGS="-O3 -ip -static -restrict -align -DNDEBUG -fno-exceptions -vec_report"
       CXX_OPTIMIZE_FLAGS="-O3 -ip -static -restrict -align -DNDEBUG -vec_report"
       CXX_DEBUG_FLAGS="-g -pch"
       CXXLD="$CXX"

       if eval "test x$enable_openmp = xyes"; then
	  	CXX_DEBUG_FLAGS="$CXX_DEBUG_FLAGS -openmp -openmp_report -DOMP"
	  	CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -openmp -openmp_report -DOMP"
       fi

       if eval "test x$enable_debug = xyes"; then
		CXX_DEBUG_FLAGS="$CXX_DEBUG_FLAGS $CXX_PICKY_FLAGS"
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_DEBUG_FLAGS")
	        echo "configuring for debug build"
       else
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_OPTIMIZE_FLAGS")
	        echo "configuring for release build"
       fi

       dnl extra_lib="$extra_lib -lstdc++"

       AC_DEFINE_UNQUOTED(COMPILER_ICC, 1, [Intel C++ compiler])
     ;;
     sgi*)               # SGI C++  http://www.sgi.com
       echo "Configuring for SGI C++"
		AC_MSG_ERROR([No compiler flags provided for SGI C++ ])
     ;;
     gnu*)              # EGCS  http://egcs.cygnus.com/
       echo "Configuring for GNU C++"
       CXX_PICKY_FLAGS="-Wall"
       CXX_OPTIMIZE_FLAGS="-O6 -funroll-loops -fstrict-aliasing -fno-gcse -fomit-frame-pointer -fno-exceptions -DNDEBUG -g"
       CXX_DEBUG_FLAGS="-g"
       CXXLD="$CXX"

#      profile support...       
       if eval "test x$enable_profile = xyes"; then
	  	CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -pg"
       fi

#      debug
       if eval "test x$enable_debug = xyes"; then
		CXX_DEBUG_FLAGS="$CXX_DEBUG_FLAGS $CXX_PICKY_FLAGS"
	    AC_BZ_SET_COMPILER($withval,"g++","$CXX_DEBUG_FLAGS")
	    echo "configuring for debug build"
       else
	    AC_BZ_SET_COMPILER($withval,"g++","$CXX_OPTIMIZE_FLAGS")
	    echo "configuring for release build"
       fi
       F77=g77
       F77_OPTIMIZE_FLAGS="-O2 -funroll-loops"
       FORTLIBS=-lg2c
       AC_DEFINE_UNQUOTED(COMPILER_GCC, 1, [GNU C++ compiler])
     ;;
     msvc*) # Microsoft Visual C++
        echo "Configuring for Microsoft Visual C++"
        CXX_PICKY_FLAGS="/W0" # VC++ gives warnings for its own headers!
        AC_BZ_SET_COMPILER($withval,"cl","")
		# had to move this below AC_PROG_CC
#       CPPFLAGS="/TP /ML /GX /YX /FD $CXX_PICKY_FLAGS /Fo\$*.o"
        CXX_OPTIMIZE_FLAGS="/Ox"
        CXX_DEBUG_FLAGS="/Zi"
        LDOUT="/out:"
        CXXLD="link"
        AC_DEFINE_UNQUOTED(COMPILER_MSVC, 1, [Microsoft Visual C++ compiler])
     ;;
     mwerk*)
        echo "Configuring for Metrowerks Codewarrior (x86)"
        CXX_PICKY_FLAGS="-w on"
        AC_BZ_SET_COMPILER($withval,"mwcc -i-","")
		# had to move this below AC_PROG_CC
#       CPPFLAGS="$CXX_PICKY_FLAGS -o \$*.o"
        CXX_OPTIMIZE_FLAGS="-opt all -DNDEBUG"
        CXX_DEBUG_FLAGS="-g"
        CXXLD="mwld"
        AC_DEFINE_UNQUOTED(COMPILER_MWERK, 1, [Metrowerks Codewarrior C++ compiler])
     ;;
     *)
        CXXLD="$CXX"
        AC_MSG_WARN([Compiler not recognized])
     ;;
esac

AC_PREFIX_DEFAULT(`pwd`)

dnl blitz++ is out right now...
dnl AC_CXX_LIB_BLITZ(["required"])

dnl AC_CXX_LIB_GSL([required])
AM_PATH_GSL

dnl check header files
AC_HEADER_STDC
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
dnl AC_C_ASSERT

AC_CHECK_FUNCS(hypot)
AC_CHECK_FUNCS(expm1)
AC_CHECK_FUNCS(acosh)
AC_CHECK_FUNCS(asinh)
AC_CHECK_FUNCS(atanh)

AC_CHECK_FUNCS(isinf, ,[
    AC_MSG_CHECKING([for isinf with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isinf(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISINF)],
        AC_MSG_RESULT(no))])

AC_CHECK_FUNCS(finite, ,[
    AC_MSG_CHECKING([for finite with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; finite(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_FINITE)
        ac_cv_func_finite=yes],
        AC_MSG_RESULT(no))])

if test "x${ac_cv_func_finite}" != "xyes" ; then
  AC_CHECK_FUNCS(isfinite, ,[
      AC_MSG_CHECKING([for isfinite with <math.h>])
      AC_TRY_LINK([#include <math.h>], [float f = 0.0; isfinite(f)],[
          AC_MSG_RESULT(yes)
          AC_DEFINE(HAVE_ISFINITE)],
          AC_MSG_RESULT(no))])
fi

AC_CHECK_FUNCS(isnan, ,[
    AC_MSG_CHECKING([for isnan with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isnan(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISNAN)],
        AC_MSG_RESULT(no))])

dnl OpenBSD has a broken implementation of log1p.
case "$host" in
    *-*-*openbsd*)
       AC_MSG_RESULT([avoiding OpenBSD system log1p - using gsl version])
       ;;
    *)
       AC_CHECK_FUNCS(log1p)
       ;;
esac

dnl Checks for libraries.
AC_CHECK_LIB(m, sqrt)

dnl check if full STL support
AC_CV_CXX_VERSION_OK
if test "$ac_cv_cxx_version_ok" = no; then
  echo "Your C++ compiler does not support the STL"
  echo "to the right extent. Check your C++ comipler..."
  exit
fi

AC_CACHE_SAVE

AC_SUBST(extra_lib)

AC_SUBST(MD_MAJOR_VERSION)
AC_SUBST(MD_MINOR_VERSION)
AC_SUBST(MD_MICRO_VERSION)
AC_SUBST(MD_VERSION)

AC_SUBST(compiler)

AC_DEFINE_UNQUOTED(TOP_SOURCE_DIR, "$srcdir", [top src directory])

AC_CONFIG_FILES([
	src/Makefile
	src/math/Makefile
	src/topology/Makefile
	src/configuration/Makefile
	src/algorithm/Makefile
	src/simulation/Makefile
	src/interaction/Makefile
	src/io/Makefile
	src/util/Makefile
	src/check/Makefile
	program/Makefile
	Makefile
])
	
AC_OUTPUT
