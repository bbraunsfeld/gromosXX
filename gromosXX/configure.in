dnl configure.in for GromosXX
dnl written by Markus Christen
dnl april, 2003

AC_PREREQ(2.53)

AC_INIT()
AC_CONFIG_SRCDIR(src/math/math.cc)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM
AC_MSG_RESULT([Configure gromosXX for $target])

AC_LANG(C++)

dnl MD_MAJOR_VERSION=0
dnl MD_MINOR_VERSION=0
dnl MD_MICRO_VERSION=3

dnl include version information
sinclude([VERSION])

MD_VERSION=$MD_MAJOR_VERSION.$MD_MINOR_VERSION.$MD_MICRO_VERSION
AC_DEFINE_UNQUOTED(MD_VERSION, "$MD_VERSION", [MD version info])

CONF_DATE=`date`
AC_DEFINE_UNQUOTED(MD_DATE, "$CONF_DATE", [MD date (configure)])

dnl TOP_DIR=`pwd`
dnl AC_DEFINE_UNQUOTED(TOP_DIR, "$TOP_DIR", [top level directory])

echo ""
echo "GromosXX molecular dynamics program"
echo "simple molecular dynamics simulations"
echo "version ${MD_MAJOR_VERSION}.${MD_MINOR_VERSION}.${MD_MICRO_VERSION}"
echo "${CONF_DATE}, ETH Zuerich"
echo ""
echo ""

AM_INIT_AUTOMAKE(gromosXX, $MD_VERSION, no-define)
AM_CONFIG_HEADER(config.h)
dnl AC_CONFIG_HEADERS(config.h)

dnl initialise libtool
AM_PROG_LIBTOOL

# AM_MAINTAINER_MODE

dnl option for production builds
AC_ARG_ENABLE(debug, [  --disable-debug  compile without debug options],
	,enable_debug=yes)

AC_ARG_ENABLE(openmp, [  --enable-openmp	compile with openMP support],
		      , enable_openmp=no)

AC_ARG_ENABLE(profile, [  --enable-profile	compile with profiling on],
		      , enable_profile=no)

dnl check for required programs
# AC_PROG_C
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL

# C++ requirements
dnl AC_CXX_REQUIRE_STL
dnl AC_CXX_NAMESPACES

dnl detect the compiler
compiler="none"
dnl need to test for intel first, as it looks nowadays
dnl suspiciously like GNU g++
if eval "test x$compiler = xnone"; then AC_PROG_CXX_INTELCC ; fi

if eval "test x$compiler = xnone"; then
	if eval "test x$GXX = xyes"; then
		compiler=gnucc
		echo "using GNU c++ compiler"
	fi
fi

if eval "test x$compiler = xnone"; then AC_PROG_CXX_KAICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SGICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MWERKS  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MSVCPP  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SUNCC   ; fi


dnl set some defaults to CXXFLAGS and LDFLAGS
case "$compiler" in
     kai*)               # KAI C++  http://www.kai.com/
       echo "Configuring for KAI C++"
       CXX_PICKY_FLAGS="--strict_warnings -DBZDEBUG"
       AC_BZ_SET_COMPILER($withval,"KCC","--restrict $CXX_PICKY_FLAGS")
       CXX_OPTIMIZE_FLAGS="+K3 -O3 -fast --inline_keyword_space_time=10000"
       CXX_DEBUG_FLAGS="-g +K0 -DBZDEBUG"
       CXXLD="$CXX"
	   AC_DEFINE_UNQUOTED(COMPILER_KAI, 1, [KAI C++ compiler])
     ;;
    intel*)             # Intel C++.  tested with version 8.0beta (precompiled headers)
       echo "Configuring for Intel C++"
       CXX_PICKY_FLAGS="-w1 -g -DBZDEBUG -pch"

       CXX_OPTIMIZE_FLAGS="-O3 -ip -Qoption,c,-ip_ninl_max_stats=2000 -restrict -DNDEBUG -g -align -pch"
       CXX_DEBUG_FLAGS="-g -DBZDEBUG -pch"
       CXXLD="$CXX"

#      openmp support...       
       if eval "test x$enable_openmp = xyes"; then
	  CXX_PICKY_FLAGS="$CXX_PICKY_FLAGS -openmp -openmp_report -DOMP"
	  CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -openmp -openmp_report -DOMP"
       fi

       if eval "test x$enable_debug = xyes"; then
	    AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_PICKY_FLAGS")
	    echo "configuring for debug build"
	else
	    AC_BZ_SET_COMPILER($withval,"$CXX","$CXX_OPTIMIZE_FLAGS")
	    echo "configuring for release build"
	fi

	   AC_DEFINE_UNQUOTED(COMPILER_ICC, 1, [Intel C++ compiler])
     ;;
     sgi*)               # SGI C++  http://www.sgi.com
       echo "Configuring for SGI C++"
       CXX_PICKY_FLAGS=""
       AC_BZ_SET_COMPILER($withval,"$CXX","-LANG:restrict -LANG:std $CXX_PICKY_FLAGS")
       CXX_OPTIMIZE_FLAGS="-Ofast -LANG:restrict -DNDEBUG"
       CXX_DEBUG_FLAGS="-g -DBZDEBUG"
       CXXLD="$CXX"
       LDFLAGS=
	   AC_DEFINE_UNQUOTED(COMPILER_SGI, 1, [SGI C++ compiler])
     ;;
     gnu*)              # EGCS  http://egcs.cygnus.com/
       echo "Configuring for GNU C++"
       CXX_PICKY_FLAGS="-Wall -DBZDEBUG -ftemplate-depth-40"
#       CXX_OPTIMIZE_FLAGS="-O6 -finline-limit=2500 -funroll-loops -fstrict-aliasing -fno-gcse -ftemplate-depth-40 -DNDEBUG -g -fomit-frame-pointer"
       CXX_OPTIMIZE_FLAGS="-O6 --param max-inline-insns=5000 --param max-inline-insns-single=2500 --param max-inline-insns-auto=500 --param min-inline-insns=1000 --param max-inline-insns-rtl=5000 --param max-inline-slope=100 -funroll-loops -fstrict-aliasing -fno-gcse -ftemplate-depth-40 -DNDEBUG -g -fomit-frame-pointer"
       CXX_DEBUG_FLAGS="-g -DBZ_DEBUG -DBZDEBUG -ftemplate-depth-40"
       CXXLD="$CXX"

#      profile support...       
       if eval "test x$enable_profile = xyes"; then
	  CXX_OPTIMIZE_FLAGS="$CXX_OPTIMIZE_FLAGS -pg"
       fi

#      debug
       if eval "test x$enable_debug = xyes"; then
	    AC_BZ_SET_COMPILER($withval,"g++","$CXX_PICKY_FLAGS")
	    echo "configuring for debug build"
	else
		AC_BZ_SET_COMPILER($withval,"g++","$CXX_OPTIMIZE_FLAGS")
		echo "configuring for release build"
	fi
       F77=g77
       F77_OPTIMIZE_FLAGS="-O2 -funroll-loops"
       FORTLIBS=-lg2c
	   AC_DEFINE_UNQUOTED(COMPILER_GCC, 1, [GNU C++ compiler])
     ;;
     msvc*) # Microsoft Visual C++
       echo "Configuring for Microsoft Visual C++"
       CXX_PICKY_FLAGS="/W0" # VC++ gives warnings for its own headers!
       AC_BZ_SET_COMPILER($withval,"cl","")
# had to move this below AC_PROG_CC
#       CPPFLAGS="/TP /ML /GX /YX /FD $CXX_PICKY_FLAGS /Fo\$*.o"
       CXX_OPTIMIZE_FLAGS="/Ox"
       CXX_DEBUG_FLAGS="/Zi"
       LDOUT="/out:"
       CXXLD="link"
	   AC_DEFINE_UNQUOTED(COMPILER_MSVC, 1, [Microsoft Visual C++ compiler])
     ;;
     mwerk*)
       echo "Configuring for Metrowerks Codewarrior (x86)"
       CXX_PICKY_FLAGS="-w on"
       AC_BZ_SET_COMPILER($withval,"mwcc -i-","")
# had to move this below AC_PROG_CC
#       CPPFLAGS="$CXX_PICKY_FLAGS -o \$*.o"
       CXX_OPTIMIZE_FLAGS="-opt all -DNDEBUG"
       CXX_DEBUG_FLAGS="-g"
       CXXLD="mwld"
	   AC_DEFINE_UNQUOTED(COMPILER_MWERK, 1, [Metrowerks Codewarrior C++ compiler])
     ;;
     *)
        CXXLD="$CXX"
        AC_MSG_WARN([Compiler not recognized])
     ;;
esac

AC_PREFIX_DEFAULT(`pwd`)
AC_MSG_CHECKING(blitz++ scientific computing library)
AC_CHECK_HEADER(blitz/array.h, , 
[AC_MSG_ERROR([header files for blitz++
 not found. Add the path to blitz++ to your CPPFLAGS])])
dnl AC_SEARCH_LIBS(_blitz_id, blitz, , [AC_MSG_ERROR(
dnl [lib blitz not found. make sure to include it in your
dnl CXXFLAGS, CFLAGS and LDFLAGS])])

dnl AC_MSG_CHECKING(boost test library)
dnl AC_CHECK_HEADER(boost/test/unit_test_suite.hpp, ,
dnl [AC_MSG_ERROR([header files for boost test library not found. Add the include
dnl directory to your CPPFLAGS and CXXFLAGS.])])
dnl AC_SEARCH_LIBS(main, boost_unit_test_framework, , [AC_MSG_ERROR(
dnl [libboost_unit_test_framework not found. Add the library path to your LDFLAGS])])

dnl possibly create sym links
# AC_LINK_FILES(source-list, dest-list)

# AC_MSG_CHECKING(gnu scientific library (libgsl))
# AC_CHECK_HEADER(gsl/gsl_rng.h, , AC_MSG_ERROR([header files for libgsl not found
#     install the gnu scientific library and
#     add the path to your CPPFLAGS]))

# AC_CHECK_LIB(gsl, gsl_rng_alloc)
# AC_SEARCH_LIBS(cblas_daxpy, gslcblas, ,[AC_MSG_ERROR([libgsl not found. make sure libgsl is installed if necessary add it to CXXFLAGS, CFLAGS and LDFLAGS])])
# AC_SEARCH_LIBS(gsl_rng_alloc, gsl, , [AC_MSG_ERROR([libgsl not found. make sure libgsl is installed if necessary add it to CXXFLAGS, CFLAGS and LDFLAGS])])
# AC_MSG_RESULT(yes)

dnl check header files
AC_HEADER_STDC
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
dnl AC_C_ASSERT

AC_CHECK_FUNCS(hypot)
AC_CHECK_FUNCS(expm1)
AC_CHECK_FUNCS(acosh)
AC_CHECK_FUNCS(asinh)
AC_CHECK_FUNCS(atanh)

AC_CHECK_FUNCS(isinf, ,[
    AC_MSG_CHECKING([for isinf with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isinf(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISINF)],
        AC_MSG_RESULT(no))])

AC_CHECK_FUNCS(finite, ,[
    AC_MSG_CHECKING([for finite with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; finite(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_FINITE)
        ac_cv_func_finite=yes],
        AC_MSG_RESULT(no))])

if test "x${ac_cv_func_finite}" != "xyes" ; then
  AC_CHECK_FUNCS(isfinite, ,[
      AC_MSG_CHECKING([for isfinite with <math.h>])
      AC_TRY_LINK([#include <math.h>], [float f = 0.0; isfinite(f)],[
          AC_MSG_RESULT(yes)
          AC_DEFINE(HAVE_ISFINITE)],
          AC_MSG_RESULT(no))])
fi

AC_CHECK_FUNCS(isnan, ,[
    AC_MSG_CHECKING([for isnan with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isnan(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISNAN)],
        AC_MSG_RESULT(no))])

dnl OpenBSD has a broken implementation of log1p.
case "$host" in
    *-*-*openbsd*)
       AC_MSG_RESULT([avoiding OpenBSD system log1p - using gsl version])
       ;;
    *)
       AC_CHECK_FUNCS(log1p)
       ;;
esac

dnl
dnl FIXME: on Solaris we will need a prototype for hypot, since it is
dnl missing from their math.h according to Jerry.
dnl
dnl extern double hypot(double, double);
dnl



dnl Checks for libraries.
dnl Replace `main' with a function in -lm:
AC_CHECK_LIB(m, sqrt)

dnl check if full STL support
AC_CV_CXX_VERSION_OK
if test "$ac_cv_cxx_version_ok" = no; then
  echo "Your C++ compiler does not support the STL"
  echo "to the right extent. Check your C++ comipler..."
  exit
fi

AC_CACHE_SAVE

AC_SUBST(MD_MAJOR_VERSION)
AC_SUBST(MD_MINOR_VERSION)
AC_SUBST(MD_MICRO_VERSION)
AC_SUBST(MD_VERSION)

AC_SUBST(compiler)

AC_DEFINE_UNQUOTED(TOP_SOURCE_DIR, "$srcdir", [top src directory])

AC_CONFIG_FILES([
	src/Makefile
	src/math/Makefile
	src/topology/Makefile
	src/configuration/Makefile
	src/algorithm/Makefile
	src/simulation/Makefile
	src/interaction/Makefile
	src/io/Makefile
	src/util/Makefile
	src/check/Makefile
	program/Makefile
	Makefile
])
	
AC_OUTPUT
