/**
 * @file check_parameter
 * check those parameters
 */

#include <stdheader.h>

#include <algorithm/algorithm.h>
#include <topology/topology.h>
#include <simulation/simulation.h>
#include <configuration/configuration.h>
#include <simulation/parameter.h>

#include <io/parameter/check_parameter.h>
#include <util/feature.h>

#ifdef OMP
#include <omp.h>
#endif

#undef MODULE
#undef SUBMODULE
#define MODULE io
#define SUBMODULE parameter


int io::check_parameter(simulation::Simulation & sim)
{
  const simulation::Parameter & param = sim.param();
  std::vector<util::Feature> features;
  
  // this macro function is needed by the contrib script to automatically
  // unlock features. Only features added with this add function are recognized
  // by the script!
#define add(x, y, z) features.push_back(util::Feature((x), (y), (z)))
  
  // Add all features of GROMOS that you want to cross check using the
  // "add" macro.
  
  // SYSTEM block
  add("solute", "solute simulation", param.system.npm == 1);
  add("solvent", "solvent simulation", param.system.nsm > 0);
  add("solvent_only", "solvent only simulation", param.system.npm == 0 && 
                                                 param.system.nsm > 0);
  // ENERGYMIN block
  add("steepest_descent", "steepest descent energy minimisation", 
          param.minimise.ntem == 1);
  // CONSTRAINT block
  add("solute_constraint_off", "unconstrained solute", 
          param.constraint.solute.algorithm == simulation::constr_off);
  add("solute_shake", "SHAKE for solute", 
          param.constraint.solute.algorithm == simulation::constr_shake);
  add("solute_lincs", "LINCS for solute", 
          param.constraint.solute.algorithm == simulation::constr_lincs);
  add("solute_flexshake", "flexible SHAKE for solute", 
          param.constraint.solute.algorithm == simulation::constr_flexshake);
  add("solvent_constraint_off", "unconstrained solvent", 
          param.constraint.solvent.algorithm == simulation::constr_off);
  add("solvent_shake", "SHAKE for solvent", 
          param.constraint.solvent.algorithm == simulation::constr_shake);
  // PRESSURESCALE block
  add("pressure_calculation", "pressure calculation", param.pcouple.calculate);
  add("pressure_scale_berendsen", "Berendsen barostat", param.pcouple.scale != math::pcouple_off);
  add("virial_off", "no virial calculation", param.pcouple.virial == math::no_virial);
  add("virial_atomic", "atomic virial", param.pcouple.virial == math::atomic_virial);
  add("virial_molecular", "molecular virial", param.pcouple.virial == math::molecular_virial);
  // BOUNDCOND block
  add("vacuum", "vacuum simulation", param.boundary.boundary == math::vacuum);
  add("pbc_r", "rectangular PBC", param.boundary.boundary == math::rectangular);
  add("pbc_c", "triclinic PBC", param.boundary.boundary == math::triclinic);
  add("pbc_t", "truncated octahedral PBC", param.boundary.boundary == math::truncoct);
  // PERTURBATION block
  add("perturbation", "free energy perturbation", param.perturbation.perturbation);
  add("perturbation_scaling", "perturbation scaling", param.perturbation.scaling);
  add("slow_growth", "slow growth", param.perturbation.perturbation && 
                                    param.perturbation.dlamt > 0.0);
  
  // LAMBDAS block
  add("individual_lambdas", "individual lambdas", param.lambdas.individual_lambdas);
  
  // FORCE block
  add("bond", "bond interaction", param.force.bond == 1);
  add("angle", "bond angle interaction", param.force.angle == 1);
  add("dihedral", "dihedral interaction", param.force.dihedral == 1);
  add("improper", "improper dihedral interaction", param.force.improper == 1);
  add("crf", "coulomb reaction field interaction", param.force.nonbonded_crf == 1);
  add("lj", "Lennard-Jones interaction", param.force.nonbonded_vdw == 1);
  // COMTRANSROT block
  add("com_removal", "COM motion removal", param.centreofmass.remove_rot || 
                                           param.centreofmass.remove_trans);
  // LONGRANGE block
  add("rf_excluded", "reaction field for excluded pairs", param.nonbonded.rf_excluded);
  // PAIRLIST block
  add("pairlist_standard", "standard pairlist algorithm", param.pairlist.grid == 0);
  add("pairlist_grid", "grid-based pairlist algorithm", param.pairlist.grid == 1);
  add("pairlist_vgrid", "vector grid-based pairlist algorithm", param.pairlist.grid == 2);
  add("cutoff_atomic", "atomic cutoff", param.pairlist.atomic_cutoff);
  // CGRAIN block
  add("coarse_grain", "coarse-grained simulation", param.cgrain.level == 1);
  add("multi_grain", "multi-grained simulation", param.cgrain.level == 2);
  // MULTIBATH block
  add("temp_berendsen", "Berendsen thermostat", param.multibath.nosehoover == 0);
  add("temp_nosehoover", "Nose-Hoover thermostat", param.multibath.nosehoover == 1);
  add("temp_nosehoover_chains", "Nose-Hoover chains thermostat", 
          param.multibath.nosehoover == 2);
  // POSITIONRES block
  add("position_rest", "position restraints", param.posrest.posrest != simulation::posrest_off &&
                                              param.posrest.posrest != simulation::posrest_const);
  add("position_const", "position constraints without reference position scaling", 
      param.posrest.posrest == simulation::posrest_const && 
      !param.posrest.scale_reference_positions);
  add("position_const_scaled", "position constraints with reference position scaling", 
      param.posrest.posrest == simulation::posrest_const && 
      param.posrest.scale_reference_positions);
  // DISTANCERES block
  add("distance_rest", "distance restraints", param.distanceres.distanceres != 0);
  // DIHEDRALRES block
  add("dihedral_rest", "dihedral restraints", param.dihrest.dihrest != 0 && 
                                              param.dihrest.dihrest != 3);
  add("dihedral_const", "dihedral constraints", param.dihrest.dihrest == 3);
  // JVALUERES block
  add("jvalue_rest", "J-value restraints", param.jvalue.mode != simulation::restr_off);
  // PERSCALE block
  add("perscale", "peridoic scaling", param.pscale.jrest);
  // ROTTRANS block
  add("rottrans", "roto-translational constraints", param.rottrans.rottrans);
  // INNERLOOP block
  add("innerloop_spc", "SPC special solvent loop", param.force.special_loop == simulation::special_loop_spc_check);
  // REPLICA block
  add("repex_temp", "temperature replica exchange", param.replica.num_T > 0);
  add("repex_lambda", "lambda replica exchange", param.replica.num_l > 0);
  // MULTICELL block
  add("multicell", "multiple unit cell simulation", param.multicell.multicell);
  // READTRAJ block
  add("analysis", "trajectory reading mode", param.analyze.analyze);
  // INTEGRATE block
  add("no_integration", "integration disabled", param.integrate.method == simulation::integrate_off);
  // STOCHDYN block
  add("stochdyn", "stochastic dynamics", param.stochastic.sd != 0);
  // MULTISTEP block
  add("multistep", "multistep", param.multistep.steps != 1);
  add("multistep_boost", "boost method for multiple steps", param.multistep.boost);
  // MONTECARLO block
  add("montecarlo", "chemical monte-carlo", param.montecarlo.mc);
  // RAMD block
  add("ramd", "random acceleration MD", param.ramd.fc != 0.0);
  // POLARIZE block
  add("polarization_cos", "COS polarization", param.polarize.cos && 
                                              !param.polarize.damp);
  add("polarization_cos_damped", "COS polarization", param.polarize.cos && 
                                                     param.polarize.damp);
  // RANDOMNUMBERS block
  add("random_gromos", "GROMOS96 random numbers", 
          param.rng.rng == simulation::random_g96);
  add("random_gsl", "GROMOS96 random numbers", 
          param.rng.rng == simulation::random_gsl);
  // EDS block
  add("eds", "Enveloping distribution sampling", param.eds.eds);
  
  // parallelization
  add("parallel_mpi", "MPI parallelization", sim.mpi);
  int size = 1;
#ifdef OMP
    int tid;
#pragma omp parallel private(tid)
    {
      tid = omp_get_thread_num();
      if (tid == 0){
	size = omp_get_num_threads();
      }
    }
#endif 
  add("parallel_omp", "OpenMP parallelization", size > 1);
  
  // multiple energy groups
  add("mult_energy_groups", "multiple energy groups", param.force.energy_group.size() > 1);
  
  // lattice sum: Ewald
  add("ewald", "Ewald sum electrostatics", param.nonbonded.method == simulation::el_ewald);
  
  // lattice sum: P3M
  add("p3m", "P3M electrostatics", param.nonbonded.method == simulation::el_p3m);

// we don't need the add function anymore.
#undef add
  
  util::FeatureChecker fc(features);
  
// unlock the features here. This can be very tedious. Use the script
// unlock_features.pl in the contrib directory to unlock your feature against
// all others and delete the lines you don't need. Make sure you don't unlock
// features that you didn't test or you don't know whether day really work.
  
  fc.unlock("solute", "solvent");
  fc.unlock("solute", "steepest_descent");
  fc.unlock("solute", "solute_constraint_off");
  fc.unlock("solute", "solute_shake");
  fc.unlock("solute", "solute_lincs");
  fc.unlock("solute", "solute_flexshake");
  fc.unlock("solute", "solvent_constraint_off");
  fc.unlock("solute", "solvent_shake");
  fc.unlock("solute", "pressure_calculation");
  fc.unlock("solute", "pressure_scale_berendsen");
  fc.unlock("solute", "virial_off");
  fc.unlock("solute", "virial_atomic");
  fc.unlock("solute", "virial_molecular");
  fc.unlock("solute", "vacuum");
  fc.unlock("solute", "pbc_r");
  fc.unlock("solute", "pbc_c");
  fc.unlock("solute", "pbc_t");
  fc.unlock("solute", "perturbation");
  fc.unlock("solute", "perturbation_scaling");
  fc.unlock("solute", "bond");
  fc.unlock("solute", "angle");
  fc.unlock("solute", "dihedral");
  fc.unlock("solute", "improper");
  fc.unlock("solute", "crf");
  fc.unlock("solute", "lj");
  fc.unlock("solute", "com_removal");
  fc.unlock("solute", "rf_excluded");
  fc.unlock("solute", "pairlist_standard");
  fc.unlock("solute", "pairlist_grid");
  fc.unlock("solute", "pairlist_vgrid");
  fc.unlock("solute", "cutoff_atomic");
  fc.unlock("solute", "coarse_grain");
  fc.unlock("solute", "multi_grain");
  fc.unlock("solute", "temp_berendsen");
  fc.unlock("solute", "temp_nosehoover");
  fc.unlock("solute", "temp_nosehoover_chains");
  fc.unlock("solute", "position_rest");
  fc.unlock("solute", "position_const");
  fc.unlock("solute", "position_const_scaled");
  fc.unlock("solute", "distance_rest");
  fc.unlock("solute", "dihedral_rest");
  fc.unlock("solute", "dihedral_const");
  fc.unlock("solute", "jvalue_rest");
  fc.unlock("solute", "perscale");
  fc.unlock("solute", "rottrans");
  fc.unlock("solute", "innerloop_spc");
  fc.unlock("solute", "repex_temp");
  fc.unlock("solute", "repex_lambda");
  fc.unlock("solute", "multicell");
  fc.unlock("solute", "analysis");
  fc.unlock("solute", "no_integration");
  fc.unlock("solute", "stochdyn");
  fc.unlock("solute", "multistep");
  fc.unlock("solute", "multistep_boost");
  fc.unlock("solute", "montecarlo");
  fc.unlock("solute", "ramd");
  fc.unlock("solute", "polarization_cos");
  fc.unlock("solute", "polarization_cos_damped");
  fc.unlock("solute", "random_gromos");
  fc.unlock("solute", "random_gsl");
  fc.unlock("solute", "parallel_mpi");
  fc.unlock("solute", "parallel_omp");
  fc.unlock("solvent", "solvent_only");
  fc.unlock("solvent", "steepest_descent");
  fc.unlock("solvent", "solute_constraint_off");
  fc.unlock("solvent", "solute_shake");
  fc.unlock("solvent", "solute_lincs");
  fc.unlock("solvent", "solute_flexshake");
  fc.unlock("solvent", "solvent_constraint_off", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solvent", "solvent_shake");
  fc.unlock("solvent", "pressure_calculation");
  fc.unlock("solvent", "pressure_scale_berendsen");
  fc.unlock("solvent", "virial_off");
  fc.unlock("solvent", "virial_atomic");
  fc.unlock("solvent", "virial_molecular");
  fc.unlock("solvent", "vacuum");
  fc.unlock("solvent", "pbc_r");
  fc.unlock("solvent", "pbc_c");
  fc.unlock("solvent", "pbc_t");
  fc.unlock("solvent", "perturbation");
  fc.unlock("solvent", "perturbation_scaling");
  fc.unlock("solvent", "bond");
  fc.unlock("solvent", "angle");
  fc.unlock("solvent", "dihedral");
  fc.unlock("solvent", "improper");
  fc.unlock("solvent", "crf");
  fc.unlock("solvent", "lj");
  fc.unlock("solvent", "com_removal");
  fc.unlock("solvent", "rf_excluded");
  fc.unlock("solvent", "pairlist_standard");
  fc.unlock("solvent", "pairlist_grid");
  fc.unlock("solvent", "pairlist_vgrid");
  fc.unlock("solvent", "cutoff_atomic");
  fc.unlock("solvent", "coarse_grain");
  fc.unlock("solvent", "multi_grain");
  fc.unlock("solvent", "temp_berendsen");
  fc.unlock("solvent", "temp_nosehoover");
  fc.unlock("solvent", "temp_nosehoover_chains");
  fc.unlock("solvent", "position_rest");
  fc.unlock("solvent", "position_const");
  fc.unlock("solvent", "position_const_scaled");
  fc.unlock("solvent", "distance_rest");
  fc.unlock("solvent", "dihedral_rest");
  fc.unlock("solvent", "dihedral_const");
  fc.unlock("solvent", "jvalue_rest");
  fc.unlock("solvent", "perscale");
  fc.unlock("solvent", "rottrans");
  fc.unlock("solvent", "innerloop_spc");
  fc.unlock("solvent", "repex_temp");
  fc.unlock("solvent", "repex_lambda");
  fc.unlock("solvent", "multicell");
  fc.unlock("solvent", "analysis");
  fc.unlock("solvent", "no_integration");
  fc.unlock("solvent", "multistep");
  fc.unlock("solvent", "multistep_boost");
  fc.unlock("solvent", "montecarlo");
  fc.unlock("solvent", "ramd");
  fc.unlock("solvent", "polarization_cos");
  fc.unlock("solvent", "polarization_cos_damped");
  fc.unlock("solvent", "random_gromos");
  fc.unlock("solvent", "random_gsl");
  fc.unlock("solvent", "parallel_mpi");
  fc.unlock("solvent", "parallel_omp");
  fc.unlock("solvent_only", "steepest_descent");
  fc.unlock("solvent_only", "solute_constraint_off");
  fc.unlock("solvent_only", "solvent_constraint_off", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solvent_only", "solvent_shake");
  fc.unlock("solvent_only", "pressure_calculation");
  fc.unlock("solvent_only", "pressure_scale_berendsen");
  fc.unlock("solvent_only", "virial_off");
  fc.unlock("solvent_only", "virial_atomic");
  fc.unlock("solvent_only", "virial_molecular");
  fc.unlock("solvent_only", "vacuum");
  fc.unlock("solvent_only", "pbc_r");
  fc.unlock("solvent_only", "pbc_c");
  fc.unlock("solvent_only", "pbc_t");
  fc.unlock("solvent_only", "bond");
  fc.unlock("solvent_only", "angle");
  fc.unlock("solvent_only", "dihedral");
  fc.unlock("solvent_only", "improper");
  fc.unlock("solvent_only", "crf");
  fc.unlock("solvent_only", "lj");
  fc.unlock("solvent_only", "com_removal");
  fc.unlock("solvent_only", "rf_excluded");
  fc.unlock("solvent_only", "pairlist_standard");
  fc.unlock("solvent_only", "pairlist_grid");
  fc.unlock("solvent_only", "pairlist_vgrid");
  fc.unlock("solvent_only", "cutoff_atomic");
  fc.unlock("solvent_only", "temp_berendsen");
  fc.unlock("solvent_only", "temp_nosehoover");
  fc.unlock("solvent_only", "temp_nosehoover_chains");
  fc.unlock("solvent_only", "position_rest");
  fc.unlock("solvent_only", "position_const");
  fc.unlock("solvent_only", "position_const_scaled");
  fc.unlock("solvent_only", "distance_rest");
  fc.unlock("solvent_only", "dihedral_rest");
  fc.unlock("solvent_only", "rottrans");
  fc.unlock("solvent_only", "innerloop_spc");
  fc.unlock("solvent_only", "repex_temp");
  fc.unlock("solvent_only", "repex_lambda");
  fc.unlock("solvent_only", "multicell");
  fc.unlock("solvent_only", "analysis");
  fc.unlock("solvent_only", "no_integration");
  fc.unlock("solvent_only", "ramd");
  fc.unlock("solvent_only", "polarization_cos");
  fc.unlock("solvent_only", "polarization_cos_damped");
  fc.unlock("solvent_only", "random_gromos");
  fc.unlock("solvent_only", "random_gsl");
  fc.unlock("solvent_only", "parallel_mpi");
  fc.unlock("solvent_only", "parallel_omp");
  fc.unlock("steepest_descent", "solute_constraint_off");
  fc.unlock("steepest_descent", "solute_shake");
  fc.unlock("steepest_descent", "solute_lincs");
  fc.unlock("steepest_descent", "solute_flexshake");
  fc.unlock("steepest_descent", "solvent_constraint_off");
  fc.unlock("steepest_descent", "solvent_shake");
  fc.unlock("steepest_descent", "pressure_calculation");
  fc.unlock("steepest_descent", "pressure_scale_berendsen");
  fc.unlock("steepest_descent", "virial_off");
  fc.unlock("steepest_descent", "virial_atomic");
  fc.unlock("steepest_descent", "virial_molecular");
  fc.unlock("steepest_descent", "vacuum");
  fc.unlock("steepest_descent", "pbc_r");
  fc.unlock("steepest_descent", "pbc_c");
  fc.unlock("steepest_descent", "pbc_t");
  fc.unlock("steepest_descent", "perturbation");
  fc.unlock("steepest_descent", "perturbation_scaling");
  fc.unlock("steepest_descent", "bond");
  fc.unlock("steepest_descent", "angle");
  fc.unlock("steepest_descent", "dihedral");
  fc.unlock("steepest_descent", "improper");
  fc.unlock("steepest_descent", "crf");
  fc.unlock("steepest_descent", "lj");
  fc.unlock("steepest_descent", "com_removal");
  fc.unlock("steepest_descent", "rf_excluded");
  fc.unlock("steepest_descent", "pairlist_standard");
  fc.unlock("steepest_descent", "pairlist_grid");
  fc.unlock("steepest_descent", "pairlist_vgrid");
  fc.unlock("steepest_descent", "cutoff_atomic");
  fc.unlock("steepest_descent", "coarse_grain");
  fc.unlock("steepest_descent", "multi_grain");
  fc.unlock("steepest_descent", "temp_berendsen");
  fc.unlock("steepest_descent", "temp_nosehoover");
  fc.unlock("steepest_descent", "temp_nosehoover_chains");
  fc.unlock("steepest_descent", "position_rest");
  fc.unlock("steepest_descent", "position_const");
  fc.unlock("steepest_descent", "position_const_scaled");
  fc.unlock("steepest_descent", "distance_rest");
  fc.unlock("steepest_descent", "dihedral_rest");
  fc.unlock("steepest_descent", "dihedral_const");
  fc.unlock("steepest_descent", "jvalue_rest");
  fc.unlock("steepest_descent", "perscale");
  fc.unlock("steepest_descent", "rottrans");
  fc.unlock("steepest_descent", "innerloop_spc");
  fc.unlock("steepest_descent", "multicell");
  fc.unlock("steepest_descent", "analysis");
  fc.unlock("steepest_descent", "no_integration");
  fc.unlock("steepest_descent", "multistep");
  fc.unlock("steepest_descent", "multistep_boost");
  fc.unlock("steepest_descent", "montecarlo");
  fc.unlock("steepest_descent", "ramd");
  fc.unlock("steepest_descent", "polarization_cos");
  fc.unlock("steepest_descent", "polarization_cos_damped");
  fc.unlock("steepest_descent", "random_gromos");
  fc.unlock("steepest_descent", "random_gsl");
  fc.unlock("steepest_descent", "parallel_mpi");
  fc.unlock("steepest_descent", "parallel_omp");
  fc.unlock("solute_constraint_off", "solvent_constraint_off");
  fc.unlock("solute_constraint_off", "solvent_shake");
  fc.unlock("solute_constraint_off", "pressure_calculation");
  fc.unlock("solute_constraint_off", "pressure_scale_berendsen");
  fc.unlock("solute_constraint_off", "virial_off");
  fc.unlock("solute_constraint_off", "virial_atomic");
  fc.unlock("solute_constraint_off", "virial_molecular");
  fc.unlock("solute_constraint_off", "vacuum");
  fc.unlock("solute_constraint_off", "pbc_r");
  fc.unlock("solute_constraint_off", "pbc_c");
  fc.unlock("solute_constraint_off", "pbc_t");
  fc.unlock("solute_constraint_off", "perturbation");
  fc.unlock("solute_constraint_off", "perturbation_scaling");
  fc.unlock("solute_constraint_off", "bond");
  fc.unlock("solute_constraint_off", "angle");
  fc.unlock("solute_constraint_off", "dihedral");
  fc.unlock("solute_constraint_off", "improper");
  fc.unlock("solute_constraint_off", "crf");
  fc.unlock("solute_constraint_off", "lj");
  fc.unlock("solute_constraint_off", "com_removal");
  fc.unlock("solute_constraint_off", "rf_excluded");
  fc.unlock("solute_constraint_off", "pairlist_standard");
  fc.unlock("solute_constraint_off", "pairlist_grid");
  fc.unlock("solute_constraint_off", "pairlist_vgrid");
  fc.unlock("solute_constraint_off", "cutoff_atomic");
  fc.unlock("solute_constraint_off", "coarse_grain");
  fc.unlock("solute_constraint_off", "multi_grain");
  fc.unlock("solute_constraint_off", "temp_berendsen");
  fc.unlock("solute_constraint_off", "temp_nosehoover");
  fc.unlock("solute_constraint_off", "temp_nosehoover_chains");
  fc.unlock("solute_constraint_off", "position_rest");
  fc.unlock("solute_constraint_off", "position_const");
  fc.unlock("solute_constraint_off", "position_const_scaled");
  fc.unlock("solute_constraint_off", "distance_rest");
  fc.unlock("solute_constraint_off", "dihedral_rest");
  fc.unlock("solute_constraint_off", "jvalue_rest");
  fc.unlock("solute_constraint_off", "perscale");
  fc.unlock("solute_constraint_off", "rottrans");
  fc.unlock("solute_constraint_off", "innerloop_spc");
  fc.unlock("solute_constraint_off", "repex_temp");
  fc.unlock("solute_constraint_off", "repex_lambda");
  fc.unlock("solute_constraint_off", "multicell");
  fc.unlock("solute_constraint_off", "analysis");
  fc.unlock("solute_constraint_off", "no_integration");
  fc.unlock("solute_constraint_off", "stochdyn");
  fc.unlock("solute_constraint_off", "multistep");
  fc.unlock("solute_constraint_off", "multistep_boost");
  fc.unlock("solute_constraint_off", "montecarlo");
  fc.unlock("solute_constraint_off", "ramd");
  fc.unlock("solute_constraint_off", "polarization_cos");
  fc.unlock("solute_constraint_off", "polarization_cos_damped");
  fc.unlock("solute_constraint_off", "random_gromos");
  fc.unlock("solute_constraint_off", "random_gsl");
  fc.unlock("solute_constraint_off", "parallel_mpi");
  fc.unlock("solute_constraint_off", "parallel_omp");
  fc.unlock("solute_shake", "solvent_constraint_off");
  fc.unlock("solute_shake", "solvent_shake");
  fc.unlock("solute_shake", "pressure_calculation");
  fc.unlock("solute_shake", "pressure_scale_berendsen");
  fc.unlock("solute_shake", "virial_off");
  fc.unlock("solute_shake", "virial_atomic");
  fc.unlock("solute_shake", "virial_molecular");
  fc.unlock("solute_shake", "vacuum");
  fc.unlock("solute_shake", "pbc_r");
  fc.unlock("solute_shake", "pbc_c");
  fc.unlock("solute_shake", "pbc_t");
  fc.unlock("solute_shake", "perturbation");
  fc.unlock("solute_shake", "perturbation_scaling");
  fc.unlock("solute_shake", "bond");
  fc.unlock("solute_shake", "angle");
  fc.unlock("solute_shake", "dihedral");
  fc.unlock("solute_shake", "improper");
  fc.unlock("solute_shake", "crf");
  fc.unlock("solute_shake", "lj");
  fc.unlock("solute_shake", "com_removal");
  fc.unlock("solute_shake", "rf_excluded");
  fc.unlock("solute_shake", "pairlist_standard");
  fc.unlock("solute_shake", "pairlist_grid");
  fc.unlock("solute_shake", "pairlist_vgrid");
  fc.unlock("solute_shake", "cutoff_atomic");
  fc.unlock("solute_shake", "coarse_grain");
  fc.unlock("solute_shake", "multi_grain");
  fc.unlock("solute_shake", "temp_berendsen");
  fc.unlock("solute_shake", "temp_nosehoover");
  fc.unlock("solute_shake", "temp_nosehoover_chains");
  fc.unlock("solute_shake", "position_rest");
  fc.unlock("solute_shake", "position_const");
  fc.unlock("solute_shake", "position_const_scaled");
  fc.unlock("solute_shake", "distance_rest");
  fc.unlock("solute_shake", "dihedral_rest");
  fc.unlock("solute_shake", "dihedral_const");
  fc.unlock("solute_shake", "jvalue_rest");
  fc.unlock("solute_shake", "perscale");
  fc.unlock("solute_shake", "rottrans");
  fc.unlock("solute_shake", "innerloop_spc");
  fc.unlock("solute_shake", "repex_temp");
  fc.unlock("solute_shake", "repex_lambda");
  fc.unlock("solute_shake", "multicell");
  fc.unlock("solute_shake", "analysis");
  fc.unlock("solute_shake", "no_integration");
  fc.unlock("solute_shake", "stochdyn");
  fc.unlock("solute_shake", "multistep");
  fc.unlock("solute_shake", "multistep_boost");
  fc.unlock("solute_shake", "montecarlo");
  fc.unlock("solute_shake", "ramd");
  fc.unlock("solute_shake", "polarization_cos");
  fc.unlock("solute_shake", "polarization_cos_damped");
  fc.unlock("solute_shake", "random_gromos");
  fc.unlock("solute_shake", "random_gsl");
  fc.unlock("solute_shake", "parallel_mpi");
  fc.unlock("solute_shake", "parallel_omp");
  fc.unlock("solute_lincs", "solute_flexshake");
  fc.unlock("solute_lincs", "solvent_constraint_off");
  fc.unlock("solute_lincs", "solvent_shake");
  fc.unlock("solute_lincs", "pressure_calculation");
  fc.unlock("solute_lincs", "pressure_scale_berendsen");
  fc.unlock("solute_lincs", "virial_off");
  fc.unlock("solute_lincs", "virial_atomic");
  fc.unlock("solute_lincs", "virial_molecular");
  fc.unlock("solute_lincs", "vacuum");
  fc.unlock("solute_lincs", "pbc_r");
  fc.unlock("solute_lincs", "pbc_c");
  fc.unlock("solute_lincs", "pbc_t");
  fc.unlock("solute_lincs", "perturbation");
  fc.unlock("solute_lincs", "perturbation_scaling");
  fc.unlock("solute_lincs", "bond");
  fc.unlock("solute_lincs", "angle");
  fc.unlock("solute_lincs", "dihedral");
  fc.unlock("solute_lincs", "improper");
  fc.unlock("solute_lincs", "crf");
  fc.unlock("solute_lincs", "lj");
  fc.unlock("solute_lincs", "com_removal");
  fc.unlock("solute_lincs", "rf_excluded");
  fc.unlock("solute_lincs", "pairlist_standard");
  fc.unlock("solute_lincs", "pairlist_grid");
  fc.unlock("solute_lincs", "pairlist_vgrid");
  fc.unlock("solute_lincs", "cutoff_atomic");
  fc.unlock("solute_lincs", "coarse_grain");
  fc.unlock("solute_lincs", "multi_grain");
  fc.unlock("solute_lincs", "temp_berendsen");
  fc.unlock("solute_lincs", "temp_nosehoover");
  fc.unlock("solute_lincs", "temp_nosehoover_chains");
  fc.unlock("solute_lincs", "position_rest");
  fc.unlock("solute_lincs", "position_const");
  fc.unlock("solute_lincs", "position_const_scaled");
  fc.unlock("solute_lincs", "distance_rest");
  fc.unlock("solute_lincs", "dihedral_rest");
  fc.unlock("solute_lincs", "dihedral_const");
  fc.unlock("solute_lincs", "jvalue_rest");
  fc.unlock("solute_lincs", "perscale");
  fc.unlock("solute_lincs", "rottrans");
  fc.unlock("solute_lincs", "innerloop_spc");
  fc.unlock("solute_lincs", "repex_temp");
  fc.unlock("solute_lincs", "repex_lambda");
  fc.unlock("solute_lincs", "multicell");
  fc.unlock("solute_lincs", "analysis");
  fc.unlock("solute_lincs", "no_integration");
  fc.unlock("solute_lincs", "stochdyn");
  fc.unlock("solute_lincs", "multistep");
  fc.unlock("solute_lincs", "multistep_boost");
  fc.unlock("solute_lincs", "montecarlo");
  fc.unlock("solute_lincs", "ramd");
  fc.unlock("solute_lincs", "polarization_cos");
  fc.unlock("solute_lincs", "polarization_cos_damped");
  fc.unlock("solute_lincs", "random_gromos");
  fc.unlock("solute_lincs", "random_gsl");
  fc.unlock("solute_lincs", "parallel_mpi");
  fc.unlock("solute_lincs", "parallel_omp");
  fc.unlock("solute_flexshake", "solvent_constraint_off");
  fc.unlock("solute_flexshake", "solvent_shake");
  fc.unlock("solute_flexshake", "pressure_calculation");
  fc.unlock("solute_flexshake", "pressure_scale_berendsen");
  fc.unlock("solute_flexshake", "virial_off");
  fc.unlock("solute_flexshake", "virial_atomic");
  fc.unlock("solute_flexshake", "virial_molecular");
  fc.unlock("solute_flexshake", "vacuum");
  fc.unlock("solute_flexshake", "pbc_r");
  fc.unlock("solute_flexshake", "pbc_c");
  fc.unlock("solute_flexshake", "pbc_t");
  fc.unlock("solute_flexshake", "perturbation");
  fc.unlock("solute_flexshake", "perturbation_scaling");
  fc.unlock("solute_flexshake", "bond");
  fc.unlock("solute_flexshake", "angle");
  fc.unlock("solute_flexshake", "dihedral");
  fc.unlock("solute_flexshake", "improper");
  fc.unlock("solute_flexshake", "crf");
  fc.unlock("solute_flexshake", "lj");
  fc.unlock("solute_flexshake", "com_removal", util::FeatureChecker::fc_unlocked_warning);
  fc.unlock("solute_flexshake", "rf_excluded");
  fc.unlock("solute_flexshake", "pairlist_standard");
  fc.unlock("solute_flexshake", "pairlist_grid");
  fc.unlock("solute_flexshake", "pairlist_vgrid");
  fc.unlock("solute_flexshake", "cutoff_atomic");
  fc.unlock("solute_flexshake", "temp_berendsen");
  fc.unlock("solute_flexshake", "temp_nosehoover");
  fc.unlock("solute_flexshake", "temp_nosehoover_chains");
  fc.unlock("solute_flexshake", "position_rest");
  fc.unlock("solute_flexshake", "position_const");
  fc.unlock("solute_flexshake", "position_const_scaled");
  fc.unlock("solute_flexshake", "distance_rest");
  fc.unlock("solute_flexshake", "dihedral_rest");
  fc.unlock("solute_flexshake", "dihedral_const");
  fc.unlock("solute_flexshake", "jvalue_rest");
  fc.unlock("solute_flexshake", "perscale");
  fc.unlock("solute_flexshake", "rottrans");
  fc.unlock("solute_flexshake", "innerloop_spc");
  fc.unlock("solute_flexshake", "repex_temp");
  fc.unlock("solute_flexshake", "repex_lambda");
  fc.unlock("solute_flexshake", "multicell");
  fc.unlock("solute_flexshake", "analysis");
  fc.unlock("solute_flexshake", "no_integration");
  fc.unlock("solute_flexshake", "montecarlo");
  fc.unlock("solute_flexshake", "ramd");
  fc.unlock("solute_flexshake", "random_gromos");
  fc.unlock("solute_flexshake", "random_gsl");
  fc.unlock("solute_flexshake", "parallel_mpi");
  fc.unlock("solute_flexshake", "parallel_omp");
  fc.unlock("solvent_constraint_off", "pressure_calculation");
  fc.unlock("solvent_constraint_off", "pressure_scale_berendsen");
  fc.unlock("solvent_constraint_off", "virial_off");
  fc.unlock("solvent_constraint_off", "virial_atomic");
  fc.unlock("solvent_constraint_off", "virial_molecular");
  fc.unlock("solvent_constraint_off", "vacuum");
  fc.unlock("solvent_constraint_off", "pbc_r");
  fc.unlock("solvent_constraint_off", "pbc_c");
  fc.unlock("solvent_constraint_off", "pbc_t");
  fc.unlock("solvent_constraint_off", "perturbation");
  fc.unlock("solvent_constraint_off", "perturbation_scaling");
  fc.unlock("solvent_constraint_off", "bond");
  fc.unlock("solvent_constraint_off", "angle");
  fc.unlock("solvent_constraint_off", "dihedral");
  fc.unlock("solvent_constraint_off", "improper");
  fc.unlock("solvent_constraint_off", "crf");
  fc.unlock("solvent_constraint_off", "lj");
  fc.unlock("solvent_constraint_off", "com_removal");
  fc.unlock("solvent_constraint_off", "rf_excluded");
  fc.unlock("solvent_constraint_off", "pairlist_standard");
  fc.unlock("solvent_constraint_off", "pairlist_grid");
  fc.unlock("solvent_constraint_off", "pairlist_vgrid");
  fc.unlock("solvent_constraint_off", "cutoff_atomic");
  fc.unlock("solvent_constraint_off", "coarse_grain");
  fc.unlock("solvent_constraint_off", "multi_grain");
  fc.unlock("solvent_constraint_off", "temp_berendsen");
  fc.unlock("solvent_constraint_off", "temp_nosehoover");
  fc.unlock("solvent_constraint_off", "temp_nosehoover_chains");
  fc.unlock("solvent_constraint_off", "position_rest");
  fc.unlock("solvent_constraint_off", "position_const");
  fc.unlock("solvent_constraint_off", "position_const_scaled");
  fc.unlock("solvent_constraint_off", "distance_rest");
  fc.unlock("solvent_constraint_off", "dihedral_rest");
  fc.unlock("solvent_constraint_off", "dihedral_const");
  fc.unlock("solvent_constraint_off", "jvalue_rest");
  fc.unlock("solvent_constraint_off", "perscale");
  fc.unlock("solvent_constraint_off", "rottrans");
  fc.unlock("solvent_constraint_off", "innerloop_spc");
  fc.unlock("solvent_constraint_off", "repex_temp");
  fc.unlock("solvent_constraint_off", "repex_lambda");
  fc.unlock("solvent_constraint_off", "multicell");
  fc.unlock("solvent_constraint_off", "analysis");
  fc.unlock("solvent_constraint_off", "no_integration");
  fc.unlock("solvent_constraint_off", "stochdyn");
  fc.unlock("solvent_constraint_off", "multistep");
  fc.unlock("solvent_constraint_off", "multistep_boost");
  fc.unlock("solvent_constraint_off", "montecarlo");
  fc.unlock("solvent_constraint_off", "ramd");
  fc.unlock("solvent_constraint_off", "polarization_cos");
  fc.unlock("solvent_constraint_off", "polarization_cos_damped");
  fc.unlock("solvent_constraint_off", "random_gromos");
  fc.unlock("solvent_constraint_off", "random_gsl");
  fc.unlock("solvent_constraint_off", "parallel_mpi");
  fc.unlock("solvent_constraint_off", "parallel_omp");
  fc.unlock("solvent_shake", "pressure_calculation");
  fc.unlock("solvent_shake", "pressure_scale_berendsen");
  fc.unlock("solvent_shake", "virial_off");
  fc.unlock("solvent_shake", "virial_atomic");
  fc.unlock("solvent_shake", "virial_molecular");
  fc.unlock("solvent_shake", "vacuum");
  fc.unlock("solvent_shake", "pbc_r");
  fc.unlock("solvent_shake", "pbc_c");
  fc.unlock("solvent_shake", "pbc_t");
  fc.unlock("solvent_shake", "perturbation");
  fc.unlock("solvent_shake", "perturbation_scaling");
  fc.unlock("solvent_shake", "bond");
  fc.unlock("solvent_shake", "angle");
  fc.unlock("solvent_shake", "dihedral");
  fc.unlock("solvent_shake", "improper");
  fc.unlock("solvent_shake", "crf");
  fc.unlock("solvent_shake", "lj");
  fc.unlock("solvent_shake", "com_removal");
  fc.unlock("solvent_shake", "rf_excluded");
  fc.unlock("solvent_shake", "pairlist_standard");
  fc.unlock("solvent_shake", "pairlist_grid");
  fc.unlock("solvent_shake", "pairlist_vgrid");
  fc.unlock("solvent_shake", "cutoff_atomic");
  fc.unlock("solvent_shake", "coarse_grain");
  fc.unlock("solvent_shake", "multi_grain");
  fc.unlock("solvent_shake", "temp_berendsen");
  fc.unlock("solvent_shake", "temp_nosehoover");
  fc.unlock("solvent_shake", "temp_nosehoover_chains");
  fc.unlock("solvent_shake", "position_rest");
  fc.unlock("solvent_shake", "position_const");
  fc.unlock("solvent_shake", "position_const_scaled");
  fc.unlock("solvent_shake", "distance_rest");
  fc.unlock("solvent_shake", "dihedral_rest");
  fc.unlock("solvent_shake", "dihedral_const");
  fc.unlock("solvent_shake", "jvalue_rest");
  fc.unlock("solvent_shake", "perscale");
  fc.unlock("solvent_shake", "rottrans");
  fc.unlock("solvent_shake", "innerloop_spc");
  fc.unlock("solvent_shake", "repex_temp");
  fc.unlock("solvent_shake", "repex_lambda");
  fc.unlock("solvent_shake", "multicell");
  fc.unlock("solvent_shake", "analysis");
  fc.unlock("solvent_shake", "no_integration");
  fc.unlock("solvent_shake", "stochdyn");
  fc.unlock("solvent_shake", "multistep");
  fc.unlock("solvent_shake", "multistep_boost");
  fc.unlock("solvent_shake", "montecarlo");
  fc.unlock("solvent_shake", "ramd");
  fc.unlock("solvent_shake", "polarization_cos");
  fc.unlock("solvent_shake", "polarization_cos_damped");
  fc.unlock("solvent_shake", "random_gromos");
  fc.unlock("solvent_shake", "random_gsl");
  fc.unlock("solvent_shake", "parallel_mpi");
  fc.unlock("solvent_shake", "parallel_omp");
  fc.unlock("pressure_calculation", "pressure_scale_berendsen");
  fc.unlock("pressure_calculation", "virial_atomic");
  fc.unlock("pressure_calculation", "virial_molecular");
  fc.unlock("pressure_calculation", "pbc_r");
  fc.unlock("pressure_calculation", "pbc_c");
  fc.unlock("pressure_calculation", "pbc_t");
  fc.unlock("pressure_calculation", "perturbation");
  fc.unlock("pressure_calculation", "perturbation_scaling");
  fc.unlock("pressure_calculation", "bond");
  fc.unlock("pressure_calculation", "angle");
  fc.unlock("pressure_calculation", "dihedral");
  fc.unlock("pressure_calculation", "improper");
  fc.unlock("pressure_calculation", "crf");
  fc.unlock("pressure_calculation", "lj");
  fc.unlock("pressure_calculation", "com_removal");
  fc.unlock("pressure_calculation", "rf_excluded");
  fc.unlock("pressure_calculation", "pairlist_standard");
  fc.unlock("pressure_calculation", "pairlist_grid");
  fc.unlock("pressure_calculation", "pairlist_vgrid");
  fc.unlock("pressure_calculation", "cutoff_atomic");
  fc.unlock("pressure_calculation", "coarse_grain");
  fc.unlock("pressure_calculation", "multi_grain");
  fc.unlock("pressure_calculation", "temp_berendsen");
  fc.unlock("pressure_calculation", "temp_nosehoover");
  fc.unlock("pressure_calculation", "temp_nosehoover_chains");
  fc.unlock("pressure_calculation", "position_rest");
  fc.unlock("pressure_calculation", "position_const");
  fc.unlock("pressure_calculation", "position_const_scaled");
  fc.unlock("pressure_calculation", "distance_rest");
  fc.unlock("pressure_calculation", "dihedral_rest");
  fc.unlock("pressure_calculation", "dihedral_const");
  fc.unlock("pressure_calculation", "jvalue_rest");
  fc.unlock("pressure_calculation", "perscale");
  fc.unlock("pressure_calculation", "rottrans");
  fc.unlock("pressure_calculation", "innerloop_spc");
  fc.unlock("pressure_calculation", "repex_temp");
  fc.unlock("pressure_calculation", "repex_lambda");
  fc.unlock("pressure_calculation", "multicell");
  fc.unlock("pressure_calculation", "analysis");
  fc.unlock("pressure_calculation", "no_integration");
  fc.unlock("pressure_calculation", "stochdyn");
  fc.unlock("pressure_calculation", "multistep");
  fc.unlock("pressure_calculation", "multistep_boost");
  fc.unlock("pressure_calculation", "montecarlo");
  fc.unlock("pressure_calculation", "ramd");
  fc.unlock("pressure_calculation", "polarization_cos");
  fc.unlock("pressure_calculation", "polarization_cos_damped");
  fc.unlock("pressure_calculation", "random_gromos");
  fc.unlock("pressure_calculation", "random_gsl");
  fc.unlock("pressure_calculation", "parallel_mpi");
  fc.unlock("pressure_calculation", "parallel_omp");
  fc.unlock("pressure_scale_berendsen", "virial_atomic");
  fc.unlock("pressure_scale_berendsen", "virial_molecular");
  fc.unlock("pressure_scale_berendsen", "pbc_r");
  fc.unlock("pressure_scale_berendsen", "pbc_c");
  fc.unlock("pressure_scale_berendsen", "pbc_t");
  fc.unlock("pressure_scale_berendsen", "perturbation");
  fc.unlock("pressure_scale_berendsen", "perturbation_scaling");
  fc.unlock("pressure_scale_berendsen", "bond");
  fc.unlock("pressure_scale_berendsen", "angle");
  fc.unlock("pressure_scale_berendsen", "dihedral");
  fc.unlock("pressure_scale_berendsen", "improper");
  fc.unlock("pressure_scale_berendsen", "crf");
  fc.unlock("pressure_scale_berendsen", "lj");
  fc.unlock("pressure_scale_berendsen", "com_removal");
  fc.unlock("pressure_scale_berendsen", "rf_excluded");
  fc.unlock("pressure_scale_berendsen", "pairlist_standard");
  fc.unlock("pressure_scale_berendsen", "pairlist_grid");
  fc.unlock("pressure_scale_berendsen", "pairlist_vgrid");
  fc.unlock("pressure_scale_berendsen", "cutoff_atomic");
  fc.unlock("pressure_scale_berendsen", "coarse_grain");
  fc.unlock("pressure_scale_berendsen", "multi_grain");
  fc.unlock("pressure_scale_berendsen", "temp_berendsen");
  fc.unlock("pressure_scale_berendsen", "temp_nosehoover");
  fc.unlock("pressure_scale_berendsen", "temp_nosehoover_chains");
  fc.unlock("pressure_scale_berendsen", "position_rest");
  fc.unlock("pressure_scale_berendsen", "position_const");
  fc.unlock("pressure_scale_berendsen", "position_const_scaled");
  fc.unlock("pressure_scale_berendsen", "distance_rest");
  fc.unlock("pressure_scale_berendsen", "dihedral_rest");
  fc.unlock("pressure_scale_berendsen", "dihedral_const");
  fc.unlock("pressure_scale_berendsen", "jvalue_rest");
  fc.unlock("pressure_scale_berendsen", "perscale");
  fc.unlock("pressure_scale_berendsen", "rottrans");
  fc.unlock("pressure_scale_berendsen", "innerloop_spc");
  fc.unlock("pressure_scale_berendsen", "repex_temp");
  fc.unlock("pressure_scale_berendsen", "repex_lambda");
  fc.unlock("pressure_scale_berendsen", "multicell");
  fc.unlock("pressure_scale_berendsen", "analysis");
  fc.unlock("pressure_scale_berendsen", "no_integration");
  fc.unlock("pressure_scale_berendsen", "stochdyn");
  fc.unlock("pressure_scale_berendsen", "multistep");
  fc.unlock("pressure_scale_berendsen", "multistep_boost");
  fc.unlock("pressure_scale_berendsen", "montecarlo");
  fc.unlock("pressure_scale_berendsen", "ramd");
  fc.unlock("pressure_scale_berendsen", "polarization_cos");
  fc.unlock("pressure_scale_berendsen", "polarization_cos_damped");
  fc.unlock("pressure_scale_berendsen", "random_gromos");
  fc.unlock("pressure_scale_berendsen", "random_gsl");
  fc.unlock("pressure_scale_berendsen", "parallel_mpi");
  fc.unlock("pressure_scale_berendsen", "parallel_omp");
  fc.unlock("virial_off", "vacuum");
  fc.unlock("virial_off", "pbc_r");
  fc.unlock("virial_off", "pbc_c");
  fc.unlock("virial_off", "pbc_t");
  fc.unlock("virial_off", "perturbation");
  fc.unlock("virial_off", "perturbation_scaling");
  fc.unlock("virial_off", "bond");
  fc.unlock("virial_off", "angle");
  fc.unlock("virial_off", "dihedral");
  fc.unlock("virial_off", "improper");
  fc.unlock("virial_off", "crf");
  fc.unlock("virial_off", "lj");
  fc.unlock("virial_off", "com_removal");
  fc.unlock("virial_off", "rf_excluded");
  fc.unlock("virial_off", "pairlist_standard");
  fc.unlock("virial_off", "pairlist_grid");
  fc.unlock("virial_off", "pairlist_vgrid");
  fc.unlock("virial_off", "cutoff_atomic");
  fc.unlock("virial_off", "coarse_grain");
  fc.unlock("virial_off", "multi_grain");
  fc.unlock("virial_off", "temp_berendsen");
  fc.unlock("virial_off", "temp_nosehoover");
  fc.unlock("virial_off", "temp_nosehoover_chains");
  fc.unlock("virial_off", "position_rest");
  fc.unlock("virial_off", "position_const");
  fc.unlock("virial_off", "distance_rest");
  fc.unlock("virial_off", "dihedral_rest");
  fc.unlock("virial_off", "dihedral_const");
  fc.unlock("virial_off", "jvalue_rest");
  fc.unlock("virial_off", "perscale");
  fc.unlock("virial_off", "rottrans");
  fc.unlock("virial_off", "innerloop_spc");
  fc.unlock("virial_off", "repex_temp");
  fc.unlock("virial_off", "repex_lambda");
  fc.unlock("virial_off", "multicell");
  fc.unlock("virial_off", "analysis");
  fc.unlock("virial_off", "no_integration");
  fc.unlock("virial_off", "stochdyn");
  fc.unlock("virial_off", "multistep");
  fc.unlock("virial_off", "multistep_boost");
  fc.unlock("virial_off", "montecarlo");
  fc.unlock("virial_off", "ramd");
  fc.unlock("virial_off", "polarization_cos");
  fc.unlock("virial_off", "polarization_cos_damped");
  fc.unlock("virial_off", "random_gromos");
  fc.unlock("virial_off", "random_gsl");
  fc.unlock("virial_off", "parallel_mpi");
  fc.unlock("virial_off", "parallel_omp");
  fc.unlock("virial_atomic", "vacuum");
  fc.unlock("virial_atomic", "pbc_r");
  fc.unlock("virial_atomic", "pbc_c");
  fc.unlock("virial_atomic", "pbc_t");
  fc.unlock("virial_atomic", "perturbation");
  fc.unlock("virial_atomic", "perturbation_scaling");
  fc.unlock("virial_atomic", "bond");
  fc.unlock("virial_atomic", "angle");
  fc.unlock("virial_atomic", "dihedral");
  fc.unlock("virial_atomic", "improper");
  fc.unlock("virial_atomic", "crf");
  fc.unlock("virial_atomic", "lj");
  fc.unlock("virial_atomic", "com_removal");
  fc.unlock("virial_atomic", "rf_excluded");
  fc.unlock("virial_atomic", "pairlist_standard");
  fc.unlock("virial_atomic", "pairlist_grid");
  fc.unlock("virial_atomic", "pairlist_vgrid");
  fc.unlock("virial_atomic", "cutoff_atomic");
  fc.unlock("virial_atomic", "coarse_grain");
  fc.unlock("virial_atomic", "multi_grain");
  fc.unlock("virial_atomic", "temp_berendsen");
  fc.unlock("virial_atomic", "temp_nosehoover");
  fc.unlock("virial_atomic", "temp_nosehoover_chains");
  fc.unlock("virial_atomic", "position_rest");
  fc.unlock("virial_atomic", "position_const");
  fc.unlock("virial_atomic", "position_const_scaled");
  fc.unlock("virial_atomic", "distance_rest");
  fc.unlock("virial_atomic", "dihedral_rest");
  fc.unlock("virial_atomic", "dihedral_const");
  fc.unlock("virial_atomic", "jvalue_rest");
  fc.unlock("virial_atomic", "perscale");
  fc.unlock("virial_atomic", "rottrans");
  fc.unlock("virial_atomic", "innerloop_spc");
  fc.unlock("virial_atomic", "repex_temp");
  fc.unlock("virial_atomic", "repex_lambda");
  fc.unlock("virial_atomic", "multicell");
  fc.unlock("virial_atomic", "analysis");
  fc.unlock("virial_atomic", "no_integration");
  fc.unlock("virial_atomic", "stochdyn");
  fc.unlock("virial_atomic", "multistep");
  fc.unlock("virial_atomic", "multistep_boost");
  fc.unlock("virial_atomic", "montecarlo");
  fc.unlock("virial_atomic", "ramd");
  fc.unlock("virial_atomic", "polarization_cos");
  fc.unlock("virial_atomic", "polarization_cos_damped");
  fc.unlock("virial_atomic", "random_gromos");
  fc.unlock("virial_atomic", "random_gsl");
  fc.unlock("virial_atomic", "parallel_mpi");
  fc.unlock("virial_atomic", "parallel_omp");
  fc.unlock("virial_molecular", "vacuum");
  fc.unlock("virial_molecular", "pbc_r");
  fc.unlock("virial_molecular", "pbc_c");
  fc.unlock("virial_molecular", "pbc_t");
  fc.unlock("virial_molecular", "perturbation");
  fc.unlock("virial_molecular", "perturbation_scaling");
  fc.unlock("virial_molecular", "bond");
  fc.unlock("virial_molecular", "angle");
  fc.unlock("virial_molecular", "dihedral");
  fc.unlock("virial_molecular", "improper");
  fc.unlock("virial_molecular", "crf");
  fc.unlock("virial_molecular", "lj");
  fc.unlock("virial_molecular", "com_removal");
  fc.unlock("virial_molecular", "rf_excluded");
  fc.unlock("virial_molecular", "pairlist_standard");
  fc.unlock("virial_molecular", "pairlist_grid");
  fc.unlock("virial_molecular", "pairlist_vgrid");
  fc.unlock("virial_molecular", "cutoff_atomic");
  fc.unlock("virial_molecular", "coarse_grain");
  fc.unlock("virial_molecular", "multi_grain");
  fc.unlock("virial_molecular", "temp_berendsen");
  fc.unlock("virial_molecular", "temp_nosehoover");
  fc.unlock("virial_molecular", "temp_nosehoover_chains");
  fc.unlock("virial_molecular", "position_rest");
  fc.unlock("virial_molecular", "position_const");
  fc.unlock("virial_molecular", "position_const_scaled");
  fc.unlock("virial_molecular", "distance_rest");
  fc.unlock("virial_molecular", "dihedral_rest");
  fc.unlock("virial_molecular", "dihedral_const");
  fc.unlock("virial_molecular", "jvalue_rest");
  fc.unlock("virial_molecular", "perscale");
  fc.unlock("virial_molecular", "rottrans");
  fc.unlock("virial_molecular", "innerloop_spc");
  fc.unlock("virial_molecular", "repex_temp");
  fc.unlock("virial_molecular", "repex_lambda");
  fc.unlock("virial_molecular", "multicell");
  fc.unlock("virial_molecular", "analysis");
  fc.unlock("virial_molecular", "no_integration");
  fc.unlock("virial_molecular", "stochdyn");
  fc.unlock("virial_molecular", "multistep");
  fc.unlock("virial_molecular", "multistep_boost");
  fc.unlock("virial_molecular", "montecarlo");
  fc.unlock("virial_molecular", "ramd");
  fc.unlock("virial_molecular", "polarization_cos");
  fc.unlock("virial_molecular", "polarization_cos_damped");
  fc.unlock("virial_molecular", "random_gromos");
  fc.unlock("virial_molecular", "random_gsl");
  fc.unlock("virial_molecular", "parallel_mpi");
  fc.unlock("virial_molecular", "parallel_omp");
  fc.unlock("vacuum", "perturbation");
  fc.unlock("vacuum", "perturbation_scaling");
  fc.unlock("vacuum", "bond");
  fc.unlock("vacuum", "angle");
  fc.unlock("vacuum", "dihedral");
  fc.unlock("vacuum", "improper");
  fc.unlock("vacuum", "crf");
  fc.unlock("vacuum", "lj");
  fc.unlock("vacuum", "com_removal");
  fc.unlock("vacuum", "rf_excluded");
  fc.unlock("vacuum", "pairlist_standard");
  fc.unlock("vacuum", "cutoff_atomic");
  fc.unlock("vacuum", "coarse_grain");
  fc.unlock("vacuum", "multi_grain");
  fc.unlock("vacuum", "temp_berendsen");
  fc.unlock("vacuum", "temp_nosehoover");
  fc.unlock("vacuum", "temp_nosehoover_chains");
  fc.unlock("vacuum", "position_rest");
  fc.unlock("vacuum", "position_const");
  fc.unlock("vacuum", "distance_rest");
  fc.unlock("vacuum", "dihedral_rest");
  fc.unlock("vacuum", "dihedral_const");
  fc.unlock("vacuum", "jvalue_rest");
  fc.unlock("vacuum", "perscale");
  fc.unlock("vacuum", "rottrans");
  fc.unlock("vacuum", "innerloop_spc");
  fc.unlock("vacuum", "repex_temp");
  fc.unlock("vacuum", "repex_lambda");
  fc.unlock("vacuum", "analysis");
  fc.unlock("vacuum", "no_integration");
  fc.unlock("vacuum", "stochdyn");
  fc.unlock("vacuum", "multistep");
  fc.unlock("vacuum", "multistep_boost");
  fc.unlock("vacuum", "montecarlo");
  fc.unlock("vacuum", "ramd");
  fc.unlock("vacuum", "polarization_cos");
  fc.unlock("vacuum", "polarization_cos_damped");
  fc.unlock("vacuum", "random_gromos");
  fc.unlock("vacuum", "random_gsl");
  fc.unlock("vacuum", "parallel_mpi");
  fc.unlock("vacuum", "parallel_omp");
  fc.unlock("pbc_r", "perturbation");
  fc.unlock("pbc_r", "perturbation_scaling");
  fc.unlock("pbc_r", "bond");
  fc.unlock("pbc_r", "angle");
  fc.unlock("pbc_r", "dihedral");
  fc.unlock("pbc_r", "improper");
  fc.unlock("pbc_r", "crf");
  fc.unlock("pbc_r", "lj");
  fc.unlock("pbc_r", "com_removal");
  fc.unlock("pbc_r", "rf_excluded");
  fc.unlock("pbc_r", "pairlist_standard");
  fc.unlock("pbc_r", "pairlist_grid");
  fc.unlock("pbc_r", "pairlist_vgrid");
  fc.unlock("pbc_r", "cutoff_atomic");
  fc.unlock("pbc_r", "coarse_grain");
  fc.unlock("pbc_r", "multi_grain");
  fc.unlock("pbc_r", "temp_berendsen");
  fc.unlock("pbc_r", "temp_nosehoover");
  fc.unlock("pbc_r", "temp_nosehoover_chains");
  fc.unlock("pbc_r", "position_rest");
  fc.unlock("pbc_r", "position_const");
  fc.unlock("pbc_r", "position_const_scaled");
  fc.unlock("pbc_r", "distance_rest");
  fc.unlock("pbc_r", "dihedral_rest");
  fc.unlock("pbc_r", "dihedral_const");
  fc.unlock("pbc_r", "jvalue_rest");
  fc.unlock("pbc_r", "perscale");
  fc.unlock("pbc_r", "rottrans");
  fc.unlock("pbc_r", "innerloop_spc");
  fc.unlock("pbc_r", "repex_temp");
  fc.unlock("pbc_r", "repex_lambda");
  fc.unlock("pbc_r", "multicell");
  fc.unlock("pbc_r", "analysis");
  fc.unlock("pbc_r", "no_integration");
  fc.unlock("pbc_r", "stochdyn");
  fc.unlock("pbc_r", "multistep");
  fc.unlock("pbc_r", "multistep_boost");
  fc.unlock("pbc_r", "montecarlo");
  fc.unlock("pbc_r", "ramd");
  fc.unlock("pbc_r", "polarization_cos");
  fc.unlock("pbc_r", "polarization_cos_damped");
  fc.unlock("pbc_r", "random_gromos");
  fc.unlock("pbc_r", "random_gsl");
  fc.unlock("pbc_r", "parallel_mpi");
  fc.unlock("pbc_r", "parallel_omp");
  fc.unlock("pbc_c", "pbc_t");
  fc.unlock("pbc_c", "perturbation");
  fc.unlock("pbc_c", "perturbation_scaling");
  fc.unlock("pbc_c", "bond");
  fc.unlock("pbc_c", "angle");
  fc.unlock("pbc_c", "dihedral");
  fc.unlock("pbc_c", "improper");
  fc.unlock("pbc_c", "crf");
  fc.unlock("pbc_c", "lj");
  fc.unlock("pbc_c", "com_removal");
  fc.unlock("pbc_c", "rf_excluded");
  fc.unlock("pbc_c", "pairlist_standard");
  fc.unlock("pbc_c", "cutoff_atomic");
  fc.unlock("pbc_c", "coarse_grain");
  fc.unlock("pbc_c", "multi_grain");
  fc.unlock("pbc_c", "temp_berendsen");
  fc.unlock("pbc_c", "temp_nosehoover");
  fc.unlock("pbc_c", "temp_nosehoover_chains");
  fc.unlock("pbc_c", "position_rest");
  fc.unlock("pbc_c", "position_const");
  fc.unlock("pbc_c", "position_const_scaled");
  fc.unlock("pbc_c", "distance_rest");
  fc.unlock("pbc_c", "dihedral_rest");
  fc.unlock("pbc_c", "dihedral_const");
  fc.unlock("pbc_c", "jvalue_rest");
  fc.unlock("pbc_c", "perscale");
  fc.unlock("pbc_c", "rottrans");
  fc.unlock("pbc_c", "innerloop_spc");
  fc.unlock("pbc_c", "repex_temp");
  fc.unlock("pbc_c", "repex_lambda");
  fc.unlock("pbc_c", "multicell");
  fc.unlock("pbc_c", "analysis");
  fc.unlock("pbc_c", "no_integration");
  fc.unlock("pbc_c", "multistep");
  fc.unlock("pbc_c", "multistep_boost");
  fc.unlock("pbc_c", "montecarlo");
  fc.unlock("pbc_c", "ramd");
  fc.unlock("pbc_c", "polarization_cos");
  fc.unlock("pbc_c", "polarization_cos_damped");
  fc.unlock("pbc_c", "random_gromos");
  fc.unlock("pbc_c", "random_gsl");
  fc.unlock("pbc_c", "parallel_mpi");
  fc.unlock("pbc_c", "parallel_omp");
  fc.unlock("pbc_t", "perturbation");
  fc.unlock("pbc_t", "perturbation_scaling");
  fc.unlock("pbc_t", "bond");
  fc.unlock("pbc_t", "angle");
  fc.unlock("pbc_t", "dihedral");
  fc.unlock("pbc_t", "improper");
  fc.unlock("pbc_t", "crf");
  fc.unlock("pbc_t", "lj");
  fc.unlock("pbc_t", "com_removal");
  fc.unlock("pbc_t", "rf_excluded");
  fc.unlock("pbc_t", "pairlist_standard");
  fc.unlock("pbc_t", "cutoff_atomic");
  fc.unlock("pbc_t", "coarse_grain");
  fc.unlock("pbc_t", "multi_grain");
  fc.unlock("pbc_t", "temp_berendsen");
  fc.unlock("pbc_t", "temp_nosehoover");
  fc.unlock("pbc_t", "temp_nosehoover_chains");
  fc.unlock("pbc_t", "position_rest");
  fc.unlock("pbc_t", "position_const");
  fc.unlock("pbc_t", "position_const_scaled");
  fc.unlock("pbc_t", "distance_rest");
  fc.unlock("pbc_t", "dihedral_rest");
  fc.unlock("pbc_t", "dihedral_const");
  fc.unlock("pbc_t", "jvalue_rest");
  fc.unlock("pbc_t", "perscale");
  fc.unlock("pbc_t", "rottrans");
  fc.unlock("pbc_t", "innerloop_spc");
  fc.unlock("pbc_t", "repex_temp");
  fc.unlock("pbc_t", "repex_lambda");
  fc.unlock("pbc_t", "analysis");
  fc.unlock("pbc_t", "no_integration");
  fc.unlock("pbc_t", "multistep");
  fc.unlock("pbc_t", "multistep_boost");
  fc.unlock("pbc_t", "montecarlo");
  fc.unlock("pbc_t", "ramd");
  fc.unlock("pbc_t", "polarization_cos");
  fc.unlock("pbc_t", "polarization_cos_damped");
  fc.unlock("pbc_t", "random_gromos");
  fc.unlock("pbc_t", "random_gsl");
  fc.unlock("pbc_t", "parallel_mpi");
  fc.unlock("pbc_t", "parallel_omp");
  fc.unlock("perturbation", "perturbation_scaling");
  fc.unlock("perturbation", "bond");
  fc.unlock("perturbation", "angle");
  fc.unlock("perturbation", "dihedral");
  fc.unlock("perturbation", "improper");
  fc.unlock("perturbation", "crf");
  fc.unlock("perturbation", "lj");
  fc.unlock("perturbation", "com_removal");
  fc.unlock("perturbation", "rf_excluded");
  fc.unlock("perturbation", "pairlist_standard");
  fc.unlock("perturbation", "pairlist_grid");
  fc.unlock("perturbation", "cutoff_atomic");
  fc.unlock("perturbation", "coarse_grain");
  fc.unlock("perturbation", "multi_grain");
  fc.unlock("perturbation", "temp_berendsen");
  fc.unlock("perturbation", "temp_nosehoover");
  fc.unlock("perturbation", "temp_nosehoover_chains");
  fc.unlock("perturbation", "position_rest");
  fc.unlock("perturbation", "position_const");
  fc.unlock("perturbation", "position_const_scaled");
  fc.unlock("perturbation", "distance_rest");
  fc.unlock("perturbation", "dihedral_rest");
  fc.unlock("perturbation", "dihedral_const");
  fc.unlock("perturbation", "jvalue_rest");
  fc.unlock("perturbation", "perscale");
  fc.unlock("perturbation", "rottrans");
  fc.unlock("perturbation", "innerloop_spc");
  fc.unlock("perturbation", "repex_temp");
  fc.unlock("perturbation", "repex_lambda");
  fc.unlock("perturbation", "multicell");
  fc.unlock("perturbation", "analysis");
  fc.unlock("perturbation", "no_integration");
  fc.unlock("perturbation", "stochdyn");
  fc.unlock("perturbation", "multistep");
  fc.unlock("perturbation", "multistep_boost");
  fc.unlock("perturbation", "montecarlo");
  fc.unlock("perturbation", "ramd");
  fc.unlock("perturbation", "polarization_cos");
  fc.unlock("perturbation", "polarization_cos_damped");
  fc.unlock("perturbation", "random_gromos");
  fc.unlock("perturbation", "random_gsl");
  fc.unlock("perturbation", "parallel_mpi");
  fc.unlock("perturbation", "parallel_omp");
  fc.unlock("perturbation_scaling", "bond");
  fc.unlock("perturbation_scaling", "angle");
  fc.unlock("perturbation_scaling", "dihedral");
  fc.unlock("perturbation_scaling", "improper");
  fc.unlock("perturbation_scaling", "crf");
  fc.unlock("perturbation_scaling", "lj");
  fc.unlock("perturbation_scaling", "com_removal");
  fc.unlock("perturbation_scaling", "rf_excluded");
  fc.unlock("perturbation_scaling", "pairlist_standard");
  fc.unlock("perturbation_scaling", "pairlist_grid");
  fc.unlock("perturbation_scaling", "pairlist_vgrid");
  fc.unlock("perturbation_scaling", "cutoff_atomic");
  fc.unlock("perturbation_scaling", "temp_berendsen");
  fc.unlock("perturbation_scaling", "temp_nosehoover");
  fc.unlock("perturbation_scaling", "temp_nosehoover_chains");
  fc.unlock("perturbation_scaling", "position_rest");
  fc.unlock("perturbation_scaling", "position_const");
  fc.unlock("perturbation_scaling", "position_const_scaled");
  fc.unlock("perturbation_scaling", "distance_rest");
  fc.unlock("perturbation_scaling", "dihedral_rest");
  fc.unlock("perturbation_scaling", "dihedral_const");
  fc.unlock("perturbation_scaling", "jvalue_rest");
  fc.unlock("perturbation_scaling", "perscale");
  fc.unlock("perturbation_scaling", "rottrans");
  fc.unlock("perturbation_scaling", "innerloop_spc");
  fc.unlock("perturbation_scaling", "repex_temp");
  fc.unlock("perturbation_scaling", "repex_lambda");
  fc.unlock("perturbation_scaling", "multicell");
  fc.unlock("perturbation_scaling", "analysis");
  fc.unlock("perturbation_scaling", "no_integration");
  fc.unlock("perturbation_scaling", "stochdyn");
  fc.unlock("perturbation_scaling", "multistep");
  fc.unlock("perturbation_scaling", "multistep_boost");
  fc.unlock("perturbation_scaling", "montecarlo");
  fc.unlock("perturbation_scaling", "ramd");
  fc.unlock("perturbation_scaling", "random_gromos");
  fc.unlock("perturbation_scaling", "random_gsl");
  fc.unlock("perturbation_scaling", "parallel_mpi");
  fc.unlock("perturbation_scaling", "parallel_omp");
  fc.unlock("individual_lambdas", "solute");
  fc.unlock("individual_lambdas", "solvent");
  fc.unlock("individual_lambdas", "solvent_only");
  fc.unlock("individual_lambdas", "steepest_descent");
  fc.unlock("individual_lambdas", "solute_constraint_off");
  fc.unlock("individual_lambdas", "solute_shake");
  fc.unlock("individual_lambdas", "solute_lincs");
  fc.unlock("individual_lambdas", "solute_flexshake");
  fc.unlock("individual_lambdas", "solvent_constraint_off");
  fc.unlock("individual_lambdas", "solvent_shake");
  fc.unlock("individual_lambdas", "pressure_calculation");
  fc.unlock("individual_lambdas", "pressure_scale_berendsen");
  fc.unlock("individual_lambdas", "virial_off");
  fc.unlock("individual_lambdas", "virial_atomic");
  fc.unlock("individual_lambdas", "virial_molecular");
  fc.unlock("individual_lambdas", "vacuum");
  fc.unlock("individual_lambdas", "pbc_r");
  fc.unlock("individual_lambdas", "pbc_c");
  fc.unlock("individual_lambdas", "pbc_t");
  fc.unlock("individual_lambdas", "perturbation");
  fc.unlock("individual_lambdas", "perturbation_scaling");
  //  Chris: not tested yet
  //  fc.unlock("individual_lambdas", "slow_growth");
  fc.unlock("individual_lambdas", "bond");
  fc.unlock("individual_lambdas", "angle");
  fc.unlock("individual_lambdas", "dihedral");
  fc.unlock("individual_lambdas", "improper");
  fc.unlock("individual_lambdas", "crf");
  fc.unlock("individual_lambdas", "lj");
  fc.unlock("individual_lambdas", "com_removal");
  fc.unlock("individual_lambdas", "rf_excluded");
  fc.unlock("individual_lambdas", "pairlist_standard");
  fc.unlock("individual_lambdas", "pairlist_grid");
  fc.unlock("individual_lambdas", "pairlist_vgrid");
  fc.unlock("individual_lambdas", "cutoff_atomic");
  fc.unlock("individual_lambdas", "coarse_grain");
  fc.unlock("individual_lambdas", "multi_grain");
  fc.unlock("individual_lambdas", "temp_berendsen");
  fc.unlock("individual_lambdas", "temp_nosehoover");
  fc.unlock("individual_lambdas", "temp_nosehoover_chains");
  fc.unlock("individual_lambdas", "position_rest");
  fc.unlock("individual_lambdas", "position_const");
  fc.unlock("individual_lambdas", "position_const_scaled");
  fc.unlock("individual_lambdas", "distance_rest");
  fc.unlock("individual_lambdas", "dihedral_rest");
  fc.unlock("individual_lambdas", "dihedral_const");
  fc.unlock("individual_lambdas", "jvalue_rest");
  fc.unlock("individual_lambdas", "perscale");
  fc.unlock("individual_lambdas", "rottrans");
  fc.unlock("individual_lambdas", "innerloop_spc");
  fc.unlock("individual_lambdas", "repex_temp");
  fc.unlock("individual_lambdas", "repex_lambda");
  fc.unlock("individual_lambdas", "multicell");
  fc.unlock("individual_lambdas", "analysis");
  fc.unlock("individual_lambdas", "no_integration");
  fc.unlock("individual_lambdas", "stochdyn");
  fc.unlock("individual_lambdas", "multistep");
  fc.unlock("individual_lambdas", "multistep_boost");
  fc.unlock("individual_lambdas", "montecarlo");
  fc.unlock("individual_lambdas", "ramd");
  fc.unlock("individual_lambdas", "polarization_cos");
  fc.unlock("individual_lambdas", "polarization_cos_damped");
  fc.unlock("individual_lambdas", "random_gromos");
  fc.unlock("individual_lambdas", "random_gsl");
  fc.unlock("individual_lambdas", "eds");
  fc.unlock("individual_lambdas", "parallel_mpi");
  fc.unlock("individual_lambdas", "parallel_omp");

  fc.unlock("bond", "angle");
  fc.unlock("bond", "dihedral");
  fc.unlock("bond", "improper");
  fc.unlock("bond", "crf");
  fc.unlock("bond", "lj");
  fc.unlock("bond", "com_removal");
  fc.unlock("bond", "rf_excluded");
  fc.unlock("bond", "pairlist_standard");
  fc.unlock("bond", "pairlist_grid");
  fc.unlock("bond", "pairlist_vgrid");
  fc.unlock("bond", "cutoff_atomic");
  fc.unlock("bond", "coarse_grain");
  fc.unlock("bond", "multi_grain");
  fc.unlock("bond", "temp_berendsen");
  fc.unlock("bond", "temp_nosehoover");
  fc.unlock("bond", "temp_nosehoover_chains");
  fc.unlock("bond", "position_rest");
  fc.unlock("bond", "position_const");
  fc.unlock("bond", "position_const_scaled");
  fc.unlock("bond", "distance_rest");
  fc.unlock("bond", "dihedral_rest");
  fc.unlock("bond", "dihedral_const");
  fc.unlock("bond", "jvalue_rest");
  fc.unlock("bond", "perscale");
  fc.unlock("bond", "rottrans");
  fc.unlock("bond", "innerloop_spc");
  fc.unlock("bond", "repex_temp");
  fc.unlock("bond", "repex_lambda");
  fc.unlock("bond", "multicell");
  fc.unlock("bond", "analysis");
  fc.unlock("bond", "no_integration");
  fc.unlock("bond", "stochdyn");
  fc.unlock("bond", "multistep");
  fc.unlock("bond", "multistep_boost");
  fc.unlock("bond", "montecarlo");
  fc.unlock("bond", "ramd");
  fc.unlock("bond", "polarization_cos");
  fc.unlock("bond", "polarization_cos_damped");
  fc.unlock("bond", "random_gromos");
  fc.unlock("bond", "random_gsl");
  fc.unlock("bond", "parallel_mpi");
  fc.unlock("bond", "parallel_omp");
  fc.unlock("angle", "dihedral");
  fc.unlock("angle", "improper");
  fc.unlock("angle", "crf");
  fc.unlock("angle", "lj");
  fc.unlock("angle", "com_removal");
  fc.unlock("angle", "rf_excluded");
  fc.unlock("angle", "pairlist_standard");
  fc.unlock("angle", "pairlist_grid");
  fc.unlock("angle", "pairlist_vgrid");
  fc.unlock("angle", "cutoff_atomic");
  fc.unlock("angle", "coarse_grain");
  fc.unlock("angle", "multi_grain");
  fc.unlock("angle", "temp_berendsen");
  fc.unlock("angle", "temp_nosehoover");
  fc.unlock("angle", "temp_nosehoover_chains");
  fc.unlock("angle", "position_rest");
  fc.unlock("angle", "position_const");
  fc.unlock("angle", "position_const_scaled");
  fc.unlock("angle", "distance_rest");
  fc.unlock("angle", "dihedral_rest");
  fc.unlock("angle", "dihedral_const");
  fc.unlock("angle", "jvalue_rest");
  fc.unlock("angle", "perscale");
  fc.unlock("angle", "rottrans");
  fc.unlock("angle", "innerloop_spc");
  fc.unlock("angle", "repex_temp");
  fc.unlock("angle", "repex_lambda");
  fc.unlock("angle", "multicell");
  fc.unlock("angle", "analysis");
  fc.unlock("angle", "no_integration");
  fc.unlock("angle", "stochdyn");
  fc.unlock("angle", "multistep");
  fc.unlock("angle", "multistep_boost");
  fc.unlock("angle", "montecarlo");
  fc.unlock("angle", "ramd");
  fc.unlock("angle", "polarization_cos");
  fc.unlock("angle", "polarization_cos_damped");
  fc.unlock("angle", "random_gromos");
  fc.unlock("angle", "random_gsl");
  fc.unlock("angle", "parallel_mpi");
  fc.unlock("angle", "parallel_omp");
  fc.unlock("dihedral", "improper");
  fc.unlock("dihedral", "crf");
  fc.unlock("dihedral", "lj");
  fc.unlock("dihedral", "com_removal");
  fc.unlock("dihedral", "rf_excluded");
  fc.unlock("dihedral", "pairlist_standard");
  fc.unlock("dihedral", "pairlist_grid");
  fc.unlock("dihedral", "pairlist_vgrid");
  fc.unlock("dihedral", "cutoff_atomic");
  fc.unlock("dihedral", "coarse_grain");
  fc.unlock("dihedral", "multi_grain");
  fc.unlock("dihedral", "temp_berendsen");
  fc.unlock("dihedral", "temp_nosehoover");
  fc.unlock("dihedral", "temp_nosehoover_chains");
  fc.unlock("dihedral", "position_rest");
  fc.unlock("dihedral", "position_const");
  fc.unlock("dihedral", "position_const_scaled");
  fc.unlock("dihedral", "distance_rest");
  fc.unlock("dihedral", "dihedral_rest");
  fc.unlock("dihedral", "dihedral_const");
  fc.unlock("dihedral", "jvalue_rest");
  fc.unlock("dihedral", "perscale");
  fc.unlock("dihedral", "rottrans");
  fc.unlock("dihedral", "innerloop_spc");
  fc.unlock("dihedral", "repex_temp");
  fc.unlock("dihedral", "repex_lambda");
  fc.unlock("dihedral", "multicell");
  fc.unlock("dihedral", "analysis");
  fc.unlock("dihedral", "no_integration");
  fc.unlock("dihedral", "stochdyn");
  fc.unlock("dihedral", "multistep");
  fc.unlock("dihedral", "multistep_boost");
  fc.unlock("dihedral", "montecarlo");
  fc.unlock("dihedral", "ramd");
  fc.unlock("dihedral", "polarization_cos");
  fc.unlock("dihedral", "polarization_cos_damped");
  fc.unlock("dihedral", "random_gromos");
  fc.unlock("dihedral", "random_gsl");
  fc.unlock("dihedral", "parallel_mpi");
  fc.unlock("dihedral", "parallel_omp");
  fc.unlock("improper", "crf");
  fc.unlock("improper", "lj");
  fc.unlock("improper", "com_removal");
  fc.unlock("improper", "rf_excluded");
  fc.unlock("improper", "pairlist_standard");
  fc.unlock("improper", "pairlist_grid");
  fc.unlock("improper", "pairlist_vgrid");
  fc.unlock("improper", "cutoff_atomic");
  fc.unlock("improper", "coarse_grain");
  fc.unlock("improper", "multi_grain");
  fc.unlock("improper", "temp_berendsen");
  fc.unlock("improper", "temp_nosehoover");
  fc.unlock("improper", "temp_nosehoover_chains");
  fc.unlock("improper", "position_rest");
  fc.unlock("improper", "position_const");
  fc.unlock("improper", "position_const_scaled");
  fc.unlock("improper", "distance_rest");
  fc.unlock("improper", "dihedral_rest");
  fc.unlock("improper", "dihedral_const");
  fc.unlock("improper", "jvalue_rest");
  fc.unlock("improper", "perscale");
  fc.unlock("improper", "rottrans");
  fc.unlock("improper", "innerloop_spc");
  fc.unlock("improper", "repex_temp");
  fc.unlock("improper", "repex_lambda");
  fc.unlock("improper", "multicell");
  fc.unlock("improper", "analysis");
  fc.unlock("improper", "no_integration");
  fc.unlock("improper", "stochdyn");
  fc.unlock("improper", "multistep");
  fc.unlock("improper", "multistep_boost");
  fc.unlock("improper", "montecarlo");
  fc.unlock("improper", "ramd");
  fc.unlock("improper", "polarization_cos");
  fc.unlock("improper", "polarization_cos_damped");
  fc.unlock("improper", "random_gromos");
  fc.unlock("improper", "random_gsl");
  fc.unlock("improper", "parallel_mpi");
  fc.unlock("improper", "parallel_omp");
  fc.unlock("crf", "lj");
  fc.unlock("crf", "com_removal");
  fc.unlock("crf", "rf_excluded");
  fc.unlock("crf", "pairlist_standard");
  fc.unlock("crf", "pairlist_grid");
  fc.unlock("crf", "pairlist_vgrid");
  fc.unlock("crf", "cutoff_atomic");
  fc.unlock("crf", "coarse_grain");
  fc.unlock("crf", "multi_grain");
  fc.unlock("crf", "temp_berendsen");
  fc.unlock("crf", "temp_nosehoover");
  fc.unlock("crf", "temp_nosehoover_chains");
  fc.unlock("crf", "position_rest");
  fc.unlock("crf", "position_const");
  fc.unlock("crf", "position_const_scaled");
  fc.unlock("crf", "distance_rest");
  fc.unlock("crf", "dihedral_rest");
  fc.unlock("crf", "dihedral_const");
  fc.unlock("crf", "jvalue_rest");
  fc.unlock("crf", "perscale");
  fc.unlock("crf", "rottrans");
  fc.unlock("crf", "innerloop_spc");
  fc.unlock("crf", "repex_temp");
  fc.unlock("crf", "repex_lambda");
  fc.unlock("crf", "multicell");
  fc.unlock("crf", "analysis");
  fc.unlock("crf", "no_integration");
  fc.unlock("crf", "stochdyn");
  fc.unlock("crf", "multistep");
  fc.unlock("crf", "multistep_boost");
  fc.unlock("crf", "montecarlo");
  fc.unlock("crf", "ramd");
  fc.unlock("crf", "polarization_cos");
  fc.unlock("crf", "polarization_cos_damped");
  fc.unlock("crf", "random_gromos");
  fc.unlock("crf", "random_gsl");
  fc.unlock("crf", "parallel_mpi");
  fc.unlock("crf", "parallel_omp");
  fc.unlock("lj", "com_removal");
  fc.unlock("lj", "rf_excluded");
  fc.unlock("lj", "pairlist_standard");
  fc.unlock("lj", "pairlist_grid");
  fc.unlock("lj", "pairlist_vgrid");
  fc.unlock("lj", "cutoff_atomic");
  fc.unlock("lj", "coarse_grain");
  fc.unlock("lj", "multi_grain");
  fc.unlock("lj", "temp_berendsen");
  fc.unlock("lj", "temp_nosehoover");
  fc.unlock("lj", "temp_nosehoover_chains");
  fc.unlock("lj", "position_rest");
  fc.unlock("lj", "position_const");
  fc.unlock("lj", "position_const_scaled");
  fc.unlock("lj", "distance_rest");
  fc.unlock("lj", "dihedral_rest");
  fc.unlock("lj", "dihedral_const");
  fc.unlock("lj", "jvalue_rest");
  fc.unlock("lj", "perscale");
  fc.unlock("lj", "rottrans");
  fc.unlock("lj", "innerloop_spc");
  fc.unlock("lj", "repex_temp");
  fc.unlock("lj", "repex_lambda");
  fc.unlock("lj", "multicell");
  fc.unlock("lj", "analysis");
  fc.unlock("lj", "no_integration");
  fc.unlock("lj", "stochdyn");
  fc.unlock("lj", "multistep");
  fc.unlock("lj", "multistep_boost");
  fc.unlock("lj", "montecarlo");
  fc.unlock("lj", "ramd");
  fc.unlock("lj", "polarization_cos");
  fc.unlock("lj", "polarization_cos_damped");
  fc.unlock("lj", "random_gromos");
  fc.unlock("lj", "random_gsl");
  fc.unlock("lj", "parallel_mpi");
  fc.unlock("lj", "parallel_omp");
  fc.unlock("com_removal", "rf_excluded");
  fc.unlock("com_removal", "pairlist_standard");
  fc.unlock("com_removal", "pairlist_grid");
  fc.unlock("com_removal", "pairlist_vgrid");
  fc.unlock("com_removal", "cutoff_atomic");
  fc.unlock("com_removal", "coarse_grain");
  fc.unlock("com_removal", "multi_grain");
  fc.unlock("com_removal", "temp_berendsen");
  fc.unlock("com_removal", "temp_nosehoover");
  fc.unlock("com_removal", "temp_nosehoover_chains");
  fc.unlock("com_removal", "position_rest");
  fc.unlock("com_removal", "position_const");
  fc.unlock("com_removal", "position_const_scaled");
  fc.unlock("com_removal", "distance_rest");
  fc.unlock("com_removal", "dihedral_rest");
  fc.unlock("com_removal", "dihedral_const");
  fc.unlock("com_removal", "jvalue_rest");
  fc.unlock("com_removal", "perscale");
  fc.unlock("com_removal", "rottrans");
  fc.unlock("com_removal", "innerloop_spc");
  fc.unlock("com_removal", "repex_temp");
  fc.unlock("com_removal", "repex_lambda");
  fc.unlock("com_removal", "multicell");
  fc.unlock("com_removal", "analysis");
  fc.unlock("com_removal", "no_integration");
  fc.unlock("com_removal", "stochdyn");
  fc.unlock("com_removal", "multistep");
  fc.unlock("com_removal", "multistep_boost");
  fc.unlock("com_removal", "montecarlo");
  fc.unlock("com_removal", "ramd");
  fc.unlock("com_removal", "polarization_cos");
  fc.unlock("com_removal", "polarization_cos_damped");
  fc.unlock("com_removal", "random_gromos");
  fc.unlock("com_removal", "random_gsl");
  fc.unlock("com_removal", "parallel_mpi");
  fc.unlock("com_removal", "parallel_omp");
  fc.unlock("rf_excluded", "pairlist_standard");
  fc.unlock("rf_excluded", "pairlist_grid");
  fc.unlock("rf_excluded", "pairlist_vgrid");
  fc.unlock("rf_excluded", "cutoff_atomic");
  fc.unlock("rf_excluded", "coarse_grain");
  fc.unlock("rf_excluded", "multi_grain");
  fc.unlock("rf_excluded", "temp_berendsen");
  fc.unlock("rf_excluded", "temp_nosehoover");
  fc.unlock("rf_excluded", "temp_nosehoover_chains");
  fc.unlock("rf_excluded", "position_rest");
  fc.unlock("rf_excluded", "position_const");
  fc.unlock("rf_excluded", "position_const_scaled");
  fc.unlock("rf_excluded", "distance_rest");
  fc.unlock("rf_excluded", "dihedral_rest");
  fc.unlock("rf_excluded", "dihedral_const");
  fc.unlock("rf_excluded", "jvalue_rest");
  fc.unlock("rf_excluded", "perscale");
  fc.unlock("rf_excluded", "rottrans");
  fc.unlock("rf_excluded", "innerloop_spc");
  fc.unlock("rf_excluded", "repex_temp");
  fc.unlock("rf_excluded", "repex_lambda");
  fc.unlock("rf_excluded", "multicell");
  fc.unlock("rf_excluded", "analysis");
  fc.unlock("rf_excluded", "no_integration");
  fc.unlock("rf_excluded", "stochdyn");
  fc.unlock("rf_excluded", "multistep");
  fc.unlock("rf_excluded", "multistep_boost");
  fc.unlock("rf_excluded", "montecarlo");
  fc.unlock("rf_excluded", "ramd");
  fc.unlock("rf_excluded", "polarization_cos");
  fc.unlock("rf_excluded", "polarization_cos_damped");
  fc.unlock("rf_excluded", "random_gromos");
  fc.unlock("rf_excluded", "random_gsl");
  fc.unlock("rf_excluded", "parallel_mpi");
  fc.unlock("rf_excluded", "parallel_omp");
  fc.unlock("pairlist_standard", "cutoff_atomic");
  fc.unlock("pairlist_standard", "coarse_grain");
  fc.unlock("pairlist_standard", "multi_grain");
  fc.unlock("pairlist_standard", "temp_berendsen");
  fc.unlock("pairlist_standard", "temp_nosehoover");
  fc.unlock("pairlist_standard", "temp_nosehoover_chains");
  fc.unlock("pairlist_standard", "position_rest");
  fc.unlock("pairlist_standard", "position_const");
  fc.unlock("pairlist_standard", "position_const_scaled");
  fc.unlock("pairlist_standard", "distance_rest");
  fc.unlock("pairlist_standard", "dihedral_rest");
  fc.unlock("pairlist_standard", "dihedral_const");
  fc.unlock("pairlist_standard", "jvalue_rest");
  fc.unlock("pairlist_standard", "perscale");
  fc.unlock("pairlist_standard", "rottrans");
  fc.unlock("pairlist_standard", "innerloop_spc");
  fc.unlock("pairlist_standard", "repex_temp");
  fc.unlock("pairlist_standard", "repex_lambda");
  fc.unlock("pairlist_standard", "multicell");
  fc.unlock("pairlist_standard", "analysis");
  fc.unlock("pairlist_standard", "no_integration");
  fc.unlock("pairlist_standard", "stochdyn");
  fc.unlock("pairlist_standard", "multistep");
  fc.unlock("pairlist_standard", "multistep_boost");
  fc.unlock("pairlist_standard", "montecarlo");
  fc.unlock("pairlist_standard", "ramd");
  fc.unlock("pairlist_standard", "polarization_cos");
  fc.unlock("pairlist_standard", "polarization_cos_damped");
  fc.unlock("pairlist_standard", "random_gromos");
  fc.unlock("pairlist_standard", "random_gsl");
  fc.unlock("pairlist_standard", "parallel_mpi");
  fc.unlock("pairlist_standard", "parallel_omp");
  fc.unlock("pairlist_grid", "coarse_grain");
  fc.unlock("pairlist_grid", "multi_grain");
  fc.unlock("pairlist_grid", "temp_berendsen");
  fc.unlock("pairlist_grid", "temp_nosehoover");
  fc.unlock("pairlist_grid", "temp_nosehoover_chains");
  fc.unlock("pairlist_grid", "position_rest");
  fc.unlock("pairlist_grid", "position_const");
  fc.unlock("pairlist_grid", "position_const_scaled");
  fc.unlock("pairlist_grid", "distance_rest");
  fc.unlock("pairlist_grid", "dihedral_rest");
  fc.unlock("pairlist_grid", "dihedral_const");
  fc.unlock("pairlist_grid", "jvalue_rest");
  fc.unlock("pairlist_grid", "perscale");
  fc.unlock("pairlist_grid", "rottrans");
  fc.unlock("pairlist_grid", "innerloop_spc");
  fc.unlock("pairlist_grid", "repex_temp");
  fc.unlock("pairlist_grid", "repex_lambda");
  fc.unlock("pairlist_grid", "multicell");
  fc.unlock("pairlist_grid", "analysis");
  fc.unlock("pairlist_grid", "no_integration");
  fc.unlock("pairlist_grid", "stochdyn");
  fc.unlock("pairlist_grid", "multistep");
  fc.unlock("pairlist_grid", "multistep_boost");
  fc.unlock("pairlist_grid", "montecarlo");
  fc.unlock("pairlist_grid", "ramd");
  fc.unlock("pairlist_grid", "polarization_cos");
  fc.unlock("pairlist_grid", "polarization_cos_damped");
  fc.unlock("pairlist_grid", "random_gromos");
  fc.unlock("pairlist_grid", "random_gsl");
  fc.unlock("pairlist_grid", "parallel_mpi");
  fc.unlock("pairlist_grid", "parallel_omp");
  fc.unlock("pairlist_vgrid", "temp_berendsen");
  fc.unlock("pairlist_vgrid", "temp_nosehoover");
  fc.unlock("pairlist_vgrid", "temp_nosehoover_chains");
  fc.unlock("pairlist_vgrid", "position_rest");
  fc.unlock("pairlist_vgrid", "position_const");
  fc.unlock("pairlist_vgrid", "position_const_scaled");
  fc.unlock("pairlist_vgrid", "distance_rest");
  fc.unlock("pairlist_vgrid", "dihedral_rest");
  fc.unlock("pairlist_vgrid", "dihedral_const");
  fc.unlock("pairlist_vgrid", "jvalue_rest");
  fc.unlock("pairlist_vgrid", "perscale");
  fc.unlock("pairlist_vgrid", "rottrans");
  fc.unlock("pairlist_vgrid", "innerloop_spc");
  fc.unlock("pairlist_vgrid", "repex_temp");
  fc.unlock("pairlist_vgrid", "repex_lambda");
  fc.unlock("pairlist_vgrid", "analysis");
  fc.unlock("pairlist_vgrid", "no_integration");
  fc.unlock("pairlist_vgrid", "stochdyn");
  fc.unlock("pairlist_vgrid", "ramd");
  fc.unlock("pairlist_vgrid", "random_gromos");
  fc.unlock("pairlist_vgrid", "random_gsl");
  fc.unlock("cutoff_atomic", "coarse_grain");
  fc.unlock("cutoff_atomic", "multi_grain");
  fc.unlock("cutoff_atomic", "temp_berendsen");
  fc.unlock("cutoff_atomic", "temp_nosehoover");
  fc.unlock("cutoff_atomic", "temp_nosehoover_chains");
  fc.unlock("cutoff_atomic", "position_rest");
  fc.unlock("cutoff_atomic", "position_const");
  fc.unlock("cutoff_atomic", "position_const_scaled");
  fc.unlock("cutoff_atomic", "distance_rest");
  fc.unlock("cutoff_atomic", "dihedral_rest");
  fc.unlock("cutoff_atomic", "dihedral_const");
  fc.unlock("cutoff_atomic", "jvalue_rest");
  fc.unlock("cutoff_atomic", "perscale");
  fc.unlock("cutoff_atomic", "rottrans");
  fc.unlock("cutoff_atomic", "repex_temp");
  fc.unlock("cutoff_atomic", "repex_lambda");
  fc.unlock("cutoff_atomic", "multicell");
  fc.unlock("cutoff_atomic", "analysis");
  fc.unlock("cutoff_atomic", "no_integration");
  fc.unlock("cutoff_atomic", "stochdyn");
  fc.unlock("cutoff_atomic", "multistep");
  fc.unlock("cutoff_atomic", "multistep_boost");
  fc.unlock("cutoff_atomic", "montecarlo");
  fc.unlock("cutoff_atomic", "ramd");
  fc.unlock("cutoff_atomic", "polarization_cos");
  fc.unlock("cutoff_atomic", "polarization_cos_damped");
  fc.unlock("cutoff_atomic", "random_gromos");
  fc.unlock("cutoff_atomic", "random_gsl");
  fc.unlock("cutoff_atomic", "parallel_mpi");
  fc.unlock("cutoff_atomic", "parallel_omp");
  fc.unlock("coarse_grain", "temp_berendsen");
  fc.unlock("coarse_grain", "temp_nosehoover");
  fc.unlock("coarse_grain", "temp_nosehoover_chains");
  fc.unlock("coarse_grain", "position_rest");
  fc.unlock("coarse_grain", "position_const");
  fc.unlock("coarse_grain", "position_const_scaled");
  fc.unlock("coarse_grain", "distance_rest");
  fc.unlock("coarse_grain", "perscale");
  fc.unlock("coarse_grain", "rottrans");
  fc.unlock("coarse_grain", "repex_temp");
  fc.unlock("coarse_grain", "repex_lambda");
  fc.unlock("coarse_grain", "multicell");
  fc.unlock("coarse_grain", "analysis");
  fc.unlock("coarse_grain", "no_integration");
  fc.unlock("coarse_grain", "stochdyn");
  fc.unlock("coarse_grain", "multistep");
  fc.unlock("coarse_grain", "multistep_boost");
  fc.unlock("coarse_grain", "ramd");
  fc.unlock("coarse_grain", "random_gromos");
  fc.unlock("coarse_grain", "random_gsl");
  fc.unlock("coarse_grain", "parallel_mpi");
  fc.unlock("coarse_grain", "parallel_omp");
  fc.unlock("multi_grain", "temp_berendsen");
  fc.unlock("multi_grain", "temp_nosehoover");
  fc.unlock("multi_grain", "temp_nosehoover_chains");
  fc.unlock("multi_grain", "position_rest");
  fc.unlock("multi_grain", "position_const");
  fc.unlock("multi_grain", "position_const_scaled");
  fc.unlock("multi_grain", "distance_rest");
  fc.unlock("multi_grain", "rottrans");
  fc.unlock("multi_grain", "repex_temp");
  fc.unlock("multi_grain", "repex_lambda");
  fc.unlock("multi_grain", "analysis");
  fc.unlock("multi_grain", "no_integration");
  fc.unlock("multi_grain", "stochdyn");
  fc.unlock("multi_grain", "multistep");
  fc.unlock("multi_grain", "multistep_boost");
  fc.unlock("multi_grain", "ramd");
  fc.unlock("multi_grain", "random_gromos");
  fc.unlock("multi_grain", "random_gsl");
  fc.unlock("multi_grain", "parallel_mpi");
  fc.unlock("multi_grain", "parallel_omp");
  fc.unlock("temp_berendsen", "position_rest");
  fc.unlock("temp_berendsen", "position_const");
  fc.unlock("temp_berendsen", "position_const_scaled");
  fc.unlock("temp_berendsen", "distance_rest");
  fc.unlock("temp_berendsen", "dihedral_rest");
  fc.unlock("temp_berendsen", "dihedral_const");
  fc.unlock("temp_berendsen", "jvalue_rest");
  fc.unlock("temp_berendsen", "perscale");
  fc.unlock("temp_berendsen", "rottrans");
  fc.unlock("temp_berendsen", "innerloop_spc");
  fc.unlock("temp_berendsen", "repex_temp");
  fc.unlock("temp_berendsen", "repex_lambda");
  fc.unlock("temp_berendsen", "multicell");
  fc.unlock("temp_berendsen", "analysis");
  fc.unlock("temp_berendsen", "no_integration");
  fc.unlock("temp_berendsen", "stochdyn");
  fc.unlock("temp_berendsen", "multistep");
  fc.unlock("temp_berendsen", "multistep_boost");
  fc.unlock("temp_berendsen", "montecarlo");
  fc.unlock("temp_berendsen", "ramd");
  fc.unlock("temp_berendsen", "polarization_cos");
  fc.unlock("temp_berendsen", "polarization_cos_damped");
  fc.unlock("temp_berendsen", "random_gromos");
  fc.unlock("temp_berendsen", "random_gsl");
  fc.unlock("temp_berendsen", "parallel_mpi");
  fc.unlock("temp_berendsen", "parallel_omp");
  fc.unlock("temp_nosehoover", "position_rest");
  fc.unlock("temp_nosehoover", "position_const");
  fc.unlock("temp_nosehoover", "position_const_scaled");
  fc.unlock("temp_nosehoover", "distance_rest");
  fc.unlock("temp_nosehoover", "dihedral_rest");
  fc.unlock("temp_nosehoover", "dihedral_const");
  fc.unlock("temp_nosehoover", "jvalue_rest");
  fc.unlock("temp_nosehoover", "perscale");
  fc.unlock("temp_nosehoover", "rottrans");
  fc.unlock("temp_nosehoover", "innerloop_spc");
  fc.unlock("temp_nosehoover", "repex_temp");
  fc.unlock("temp_nosehoover", "repex_lambda");
  fc.unlock("temp_nosehoover", "multicell");
  fc.unlock("temp_nosehoover", "analysis");
  fc.unlock("temp_nosehoover", "no_integration");
  fc.unlock("temp_nosehoover", "stochdyn");
  fc.unlock("temp_nosehoover", "multistep");
  fc.unlock("temp_nosehoover", "multistep_boost");
  fc.unlock("temp_nosehoover", "montecarlo");
  fc.unlock("temp_nosehoover", "ramd");
  fc.unlock("temp_nosehoover", "polarization_cos");
  fc.unlock("temp_nosehoover", "polarization_cos_damped");
  fc.unlock("temp_nosehoover", "random_gromos");
  fc.unlock("temp_nosehoover", "random_gsl");
  fc.unlock("temp_nosehoover", "parallel_mpi");
  fc.unlock("temp_nosehoover", "parallel_omp");
  fc.unlock("temp_nosehoover_chains", "position_rest");
  fc.unlock("temp_nosehoover_chains", "position_const");
  fc.unlock("temp_nosehoover_chains", "position_const_scaled");
  fc.unlock("temp_nosehoover_chains", "distance_rest");
  fc.unlock("temp_nosehoover_chains", "dihedral_rest");
  fc.unlock("temp_nosehoover_chains", "dihedral_const");
  fc.unlock("temp_nosehoover_chains", "jvalue_rest");
  fc.unlock("temp_nosehoover_chains", "perscale");
  fc.unlock("temp_nosehoover_chains", "rottrans");
  fc.unlock("temp_nosehoover_chains", "innerloop_spc");
  fc.unlock("temp_nosehoover_chains", "repex_temp");
  fc.unlock("temp_nosehoover_chains", "repex_lambda");
  fc.unlock("temp_nosehoover_chains", "multicell");
  fc.unlock("temp_nosehoover_chains", "analysis");
  fc.unlock("temp_nosehoover_chains", "no_integration");
  fc.unlock("temp_nosehoover_chains", "stochdyn");
  fc.unlock("temp_nosehoover_chains", "multistep");
  fc.unlock("temp_nosehoover_chains", "multistep_boost");
  fc.unlock("temp_nosehoover_chains", "montecarlo");
  fc.unlock("temp_nosehoover_chains", "ramd");
  fc.unlock("temp_nosehoover_chains", "polarization_cos");
  fc.unlock("temp_nosehoover_chains", "polarization_cos_damped");
  fc.unlock("temp_nosehoover_chains", "random_gromos");
  fc.unlock("temp_nosehoover_chains", "random_gsl");
  fc.unlock("temp_nosehoover_chains", "parallel_mpi");
  fc.unlock("temp_nosehoover_chains", "parallel_omp");
  fc.unlock("position_rest", "distance_rest");
  fc.unlock("position_rest", "dihedral_rest");
  fc.unlock("position_rest", "dihedral_const");
  fc.unlock("position_rest", "jvalue_rest");
  fc.unlock("position_rest", "perscale");
  fc.unlock("position_rest", "rottrans");
  fc.unlock("position_rest", "innerloop_spc");
  fc.unlock("position_rest", "repex_temp");
  fc.unlock("position_rest", "repex_lambda");
  fc.unlock("position_rest", "multicell");
  fc.unlock("position_rest", "analysis");
  fc.unlock("position_rest", "no_integration");
  fc.unlock("position_rest", "stochdyn");
  fc.unlock("position_rest", "multistep");
  fc.unlock("position_rest", "multistep_boost");
  fc.unlock("position_rest", "montecarlo");
  fc.unlock("position_rest", "ramd");
  fc.unlock("position_rest", "polarization_cos");
  fc.unlock("position_rest", "polarization_cos_damped");
  fc.unlock("position_rest", "random_gromos");
  fc.unlock("position_rest", "random_gsl");
  fc.unlock("position_rest", "parallel_mpi");
  fc.unlock("position_rest", "parallel_omp");
  fc.unlock("position_const", "distance_rest");
  fc.unlock("position_const", "dihedral_rest");
  fc.unlock("position_const", "jvalue_rest");
  fc.unlock("position_const", "perscale");
  fc.unlock("position_const", "rottrans");
  fc.unlock("position_const", "innerloop_spc");
  fc.unlock("position_const", "repex_temp");
  fc.unlock("position_const", "repex_lambda");
  fc.unlock("position_const", "multicell");
  fc.unlock("position_const", "analysis");
  fc.unlock("position_const", "no_integration");
  fc.unlock("position_const", "stochdyn");
  fc.unlock("position_const", "multistep");
  fc.unlock("position_const", "multistep_boost");
  fc.unlock("position_const", "montecarlo");
  fc.unlock("position_const", "ramd");
  fc.unlock("position_const", "polarization_cos");
  fc.unlock("position_const", "polarization_cos_damped");
  fc.unlock("position_const", "random_gromos");
  fc.unlock("position_const", "random_gsl");
  fc.unlock("position_const", "parallel_mpi");
  fc.unlock("position_const", "parallel_omp");
  fc.unlock("position_const_scaled", "distance_rest");
  fc.unlock("position_const_scaled", "dihedral_rest");
  fc.unlock("position_const_scaled", "jvalue_rest");
  fc.unlock("position_const_scaled", "perscale");
  fc.unlock("position_const_scaled", "rottrans");
  fc.unlock("position_const_scaled", "innerloop_spc");
  fc.unlock("position_const_scaled", "repex_temp");
  fc.unlock("position_const_scaled", "repex_lambda");
  fc.unlock("position_const_scaled", "multicell");
  fc.unlock("position_const_scaled", "analysis");
  fc.unlock("position_const_scaled", "no_integration");
  fc.unlock("position_const_scaled", "stochdyn");
  fc.unlock("position_const_scaled", "multistep");
  fc.unlock("position_const_scaled", "multistep_boost");
  fc.unlock("position_const_scaled", "montecarlo");
  fc.unlock("position_const_scaled", "ramd");
  fc.unlock("position_const_scaled", "polarization_cos");
  fc.unlock("position_const_scaled", "polarization_cos_damped");
  fc.unlock("position_const_scaled", "random_gromos");
  fc.unlock("position_const_scaled", "random_gsl");
  fc.unlock("position_const_scaled", "parallel_mpi");
  fc.unlock("position_const_scaled", "parallel_omp");
  fc.unlock("distance_rest", "dihedral_rest");
  fc.unlock("distance_rest", "dihedral_const");
  fc.unlock("distance_rest", "jvalue_rest");
  fc.unlock("distance_rest", "perscale");
  fc.unlock("distance_rest", "rottrans");
  fc.unlock("distance_rest", "innerloop_spc");
  fc.unlock("distance_rest", "repex_temp");
  fc.unlock("distance_rest", "repex_lambda");
  fc.unlock("distance_rest", "multicell");
  fc.unlock("distance_rest", "analysis");
  fc.unlock("distance_rest", "no_integration");
  fc.unlock("distance_rest", "stochdyn");
  fc.unlock("distance_rest", "multistep");
  fc.unlock("distance_rest", "multistep_boost");
  fc.unlock("distance_rest", "montecarlo");
  fc.unlock("distance_rest", "ramd");
  fc.unlock("distance_rest", "polarization_cos");
  fc.unlock("distance_rest", "polarization_cos_damped");
  fc.unlock("distance_rest", "random_gromos");
  fc.unlock("distance_rest", "random_gsl");
  fc.unlock("distance_rest", "parallel_mpi");
  fc.unlock("distance_rest", "parallel_omp");
  fc.unlock("dihedral_rest", "jvalue_rest");
  fc.unlock("dihedral_rest", "perscale");
  fc.unlock("dihedral_rest", "rottrans");
  fc.unlock("dihedral_rest", "innerloop_spc");
  fc.unlock("dihedral_rest", "repex_temp");
  fc.unlock("dihedral_rest", "repex_lambda");
  fc.unlock("dihedral_rest", "multicell");
  fc.unlock("dihedral_rest", "analysis");
  fc.unlock("dihedral_rest", "no_integration");
  fc.unlock("dihedral_rest", "stochdyn");
  fc.unlock("dihedral_rest", "multistep");
  fc.unlock("dihedral_rest", "multistep_boost");
  fc.unlock("dihedral_rest", "montecarlo");
  fc.unlock("dihedral_rest", "ramd");
  fc.unlock("dihedral_rest", "polarization_cos");
  fc.unlock("dihedral_rest", "polarization_cos_damped");
  fc.unlock("dihedral_rest", "random_gromos");
  fc.unlock("dihedral_rest", "random_gsl");
  fc.unlock("dihedral_rest", "parallel_mpi");
  fc.unlock("dihedral_rest", "parallel_omp");
  fc.unlock("dihedral_const", "jvalue_rest");
  fc.unlock("dihedral_const", "perscale");
  fc.unlock("dihedral_const", "rottrans");
  fc.unlock("dihedral_const", "innerloop_spc");
  fc.unlock("dihedral_const", "repex_temp");
  fc.unlock("dihedral_const", "repex_lambda");
  fc.unlock("dihedral_const", "multicell");
  fc.unlock("dihedral_const", "analysis");
  fc.unlock("dihedral_const", "no_integration");
  fc.unlock("dihedral_const", "stochdyn");
  fc.unlock("dihedral_const", "multistep");
  fc.unlock("dihedral_const", "multistep_boost");
  fc.unlock("dihedral_const", "montecarlo");
  fc.unlock("dihedral_const", "ramd");
  fc.unlock("dihedral_const", "polarization_cos");
  fc.unlock("dihedral_const", "polarization_cos_damped");
  fc.unlock("dihedral_const", "random_gromos");
  fc.unlock("dihedral_const", "random_gsl");
  fc.unlock("dihedral_const", "parallel_mpi");
  fc.unlock("dihedral_const", "parallel_omp");
  fc.unlock("jvalue_rest", "perscale");
  fc.unlock("jvalue_rest", "rottrans");
  fc.unlock("jvalue_rest", "innerloop_spc");
  fc.unlock("jvalue_rest", "repex_temp");
  fc.unlock("jvalue_rest", "repex_lambda");
  fc.unlock("jvalue_rest", "multicell");
  fc.unlock("jvalue_rest", "analysis");
  fc.unlock("jvalue_rest", "no_integration");
  fc.unlock("jvalue_rest", "stochdyn");
  fc.unlock("jvalue_rest", "multistep");
  fc.unlock("jvalue_rest", "multistep_boost");
  fc.unlock("jvalue_rest", "montecarlo");
  fc.unlock("jvalue_rest", "ramd");
  fc.unlock("jvalue_rest", "polarization_cos");
  fc.unlock("jvalue_rest", "polarization_cos_damped");
  fc.unlock("jvalue_rest", "random_gromos");
  fc.unlock("jvalue_rest", "random_gsl");
  fc.unlock("jvalue_rest", "parallel_mpi");
  fc.unlock("jvalue_rest", "parallel_omp");
  fc.unlock("perscale", "rottrans");
  fc.unlock("perscale", "innerloop_spc");
  fc.unlock("perscale", "repex_temp");
  fc.unlock("perscale", "repex_lambda");
  fc.unlock("perscale", "multicell");
  fc.unlock("perscale", "analysis");
  fc.unlock("perscale", "no_integration");
  fc.unlock("perscale", "stochdyn");
  fc.unlock("perscale", "multistep");
  fc.unlock("perscale", "multistep_boost");
  fc.unlock("perscale", "montecarlo");
  fc.unlock("perscale", "ramd");
  fc.unlock("perscale", "polarization_cos");
  fc.unlock("perscale", "polarization_cos_damped");
  fc.unlock("perscale", "random_gromos");
  fc.unlock("perscale", "random_gsl");
  fc.unlock("perscale", "parallel_mpi");
  fc.unlock("perscale", "parallel_omp");
  fc.unlock("rottrans", "innerloop_spc");
  fc.unlock("rottrans", "repex_temp");
  fc.unlock("rottrans", "repex_lambda");
  fc.unlock("rottrans", "multicell");
  fc.unlock("rottrans", "analysis");
  fc.unlock("rottrans", "no_integration");
  fc.unlock("rottrans", "stochdyn");
  fc.unlock("rottrans", "multistep");
  fc.unlock("rottrans", "multistep_boost");
  fc.unlock("rottrans", "montecarlo");
  fc.unlock("rottrans", "ramd");
  fc.unlock("rottrans", "polarization_cos");
  fc.unlock("rottrans", "polarization_cos_damped");
  fc.unlock("rottrans", "random_gromos");
  fc.unlock("rottrans", "random_gsl");
  fc.unlock("rottrans", "parallel_mpi");
  fc.unlock("rottrans", "parallel_omp");
  fc.unlock("innerloop_spc", "repex_temp");
  fc.unlock("innerloop_spc", "repex_lambda");
  fc.unlock("innerloop_spc", "multicell");
  fc.unlock("innerloop_spc", "analysis");
  fc.unlock("innerloop_spc", "no_integration");
  fc.unlock("innerloop_spc", "multistep");
  fc.unlock("innerloop_spc", "multistep_boost");
  fc.unlock("innerloop_spc", "montecarlo");
  fc.unlock("innerloop_spc", "ramd");
  fc.unlock("innerloop_spc", "random_gromos");
  fc.unlock("innerloop_spc", "random_gsl");
  fc.unlock("innerloop_spc", "parallel_mpi");
  fc.unlock("innerloop_spc", "parallel_omp");
  fc.unlock("repex_temp", "repex_lambda");
  fc.unlock("repex_temp", "multicell");
  fc.unlock("repex_temp", "analysis");
  fc.unlock("repex_temp", "no_integration");
  fc.unlock("repex_temp", "montecarlo");
  fc.unlock("repex_temp", "ramd");
  fc.unlock("repex_temp", "polarization_cos");
  fc.unlock("repex_temp", "polarization_cos_damped");
  fc.unlock("repex_temp", "random_gromos");
  fc.unlock("repex_temp", "random_gsl");
  fc.unlock("repex_temp", "parallel_mpi");
  fc.unlock("repex_temp", "parallel_omp");
  fc.unlock("repex_lambda", "multicell");
  fc.unlock("repex_lambda", "analysis");
  fc.unlock("repex_lambda", "no_integration");
  fc.unlock("repex_lambda", "ramd");
  fc.unlock("repex_lambda", "polarization_cos");
  fc.unlock("repex_lambda", "polarization_cos_damped");
  fc.unlock("repex_lambda", "random_gromos");
  fc.unlock("repex_lambda", "random_gsl");
  fc.unlock("repex_lambda", "parallel_mpi");
  fc.unlock("repex_lambda", "parallel_omp");
  fc.unlock("multicell", "analysis");
  fc.unlock("multicell", "no_integration");
  fc.unlock("multicell", "stochdyn");
  fc.unlock("multicell", "ramd");
  fc.unlock("multicell", "random_gromos");
  fc.unlock("multicell", "polarization_cos");
  fc.unlock("multicell", "polarization_cos_damped");
  fc.unlock("multicell", "analysis");
  fc.unlock("analysis", "no_integration");
  fc.unlock("analysis", "stochdyn");
  fc.unlock("analysis", "multistep");
  fc.unlock("analysis", "multistep_boost");
  fc.unlock("analysis", "montecarlo");
  fc.unlock("analysis", "ramd");
  fc.unlock("analysis", "random_gromos");
  fc.unlock("analysis", "random_gsl");
  fc.unlock("analysis", "parallel_mpi");
  fc.unlock("analysis", "parallel_omp");
  fc.unlock("no_integration", "multistep");
  fc.unlock("no_integration", "multistep_boost");
  fc.unlock("no_integration", "ramd");
  fc.unlock("no_integration", "random_gromos");
  fc.unlock("no_integration", "random_gsl");
  fc.unlock("no_integration", "parallel_mpi");
  fc.unlock("no_integration", "parallel_omp");
  fc.unlock("stochdyn", "multistep");
  fc.unlock("stochdyn", "multistep_boost");
  fc.unlock("stochdyn", "montecarlo");
  fc.unlock("stochdyn", "ramd");
  fc.unlock("stochdyn", "polarization_cos");
  fc.unlock("stochdyn", "polarization_cos_damped");
  fc.unlock("stochdyn", "random_gromos");
  fc.unlock("stochdyn", "random_gsl");
  fc.unlock("stochdyn", "parallel_mpi");
  fc.unlock("stochdyn", "parallel_omp");
  fc.unlock("multistep", "multistep_boost");
  fc.unlock("multistep", "montecarlo");
  fc.unlock("multistep", "ramd");
  fc.unlock("multistep", "polarization_cos");
  fc.unlock("multistep", "polarization_cos_damped");
  fc.unlock("multistep", "random_gromos");
  fc.unlock("multistep", "random_gsl");
  fc.unlock("multistep", "parallel_mpi");
  fc.unlock("multistep", "parallel_omp");
  fc.unlock("multistep_boost", "montecarlo");
  fc.unlock("multistep_boost", "ramd");
  fc.unlock("multistep_boost", "polarization_cos");
  fc.unlock("multistep_boost", "polarization_cos_damped");
  fc.unlock("multistep_boost", "random_gromos");
  fc.unlock("multistep_boost", "random_gsl");
  fc.unlock("multistep_boost", "parallel_mpi");
  fc.unlock("multistep_boost", "parallel_omp");
  fc.unlock("montecarlo", "ramd");
  fc.unlock("montecarlo", "polarization_cos");
  fc.unlock("montecarlo", "polarization_cos_damped");
  fc.unlock("montecarlo", "random_gsl");
  fc.unlock("montecarlo", "parallel_mpi");
  fc.unlock("montecarlo", "parallel_omp");
  fc.unlock("ramd", "polarization_cos");
  fc.unlock("ramd", "polarization_cos_damped");
  fc.unlock("ramd", "random_gsl");
  fc.unlock("ramd", "parallel_mpi");
  fc.unlock("ramd", "parallel_omp");
  fc.unlock("polarization_cos", "polarization_cos_damped");
  fc.unlock("polarization_cos", "random_gromos");
  fc.unlock("polarization_cos", "random_gsl");
  fc.unlock("polarization_cos", "parallel_mpi");
  fc.unlock("polarization_cos", "parallel_omp");
  fc.unlock("polarization_cos_damped", "random_gromos");
  fc.unlock("polarization_cos_damped", "random_gsl");
  fc.unlock("polarization_cos_damped", "parallel_mpi");
  fc.unlock("random_gromos", "parallel_mpi");
  fc.unlock("random_gromos", "parallel_omp");
  fc.unlock("random_gsl", "parallel_mpi");
  fc.unlock("random_gsl", "parallel_omp");  
  fc.unlock("slow_growth", "solute");
  fc.unlock("slow_growth", "solvent");
  fc.unlock("slow_growth", "solvent_only");
  fc.unlock("slow_growth", "steepest_descent");
  fc.unlock("slow_growth", "solute_constraint_off");
  fc.unlock("slow_growth", "solute_shake");
  fc.unlock("slow_growth", "solute_lincs");
  fc.unlock("slow_growth", "solute_flexshake");
  fc.unlock("slow_growth", "solvent_constraint_off");
  fc.unlock("slow_growth", "solvent_shake");
  fc.unlock("slow_growth", "pressure_calculation");
  fc.unlock("slow_growth", "pressure_scale_berendsen");
  fc.unlock("slow_growth", "virial_off");
  fc.unlock("slow_growth", "virial_atomic");
  fc.unlock("slow_growth", "virial_molecular");
  fc.unlock("slow_growth", "vacuum");
  fc.unlock("slow_growth", "pbc_r");
  fc.unlock("slow_growth", "pbc_c");
  fc.unlock("slow_growth", "pbc_t");
  fc.unlock("slow_growth", "bond");
  fc.unlock("slow_growth", "angle");
  fc.unlock("slow_growth", "dihedral");
  fc.unlock("slow_growth", "improper");
  fc.unlock("slow_growth", "crf");
  fc.unlock("slow_growth", "lj");
  fc.unlock("slow_growth", "com_removal");
  fc.unlock("slow_growth", "rf_excluded");
  fc.unlock("slow_growth", "pairlist_standard");
  fc.unlock("slow_growth", "pairlist_grid");
  fc.unlock("slow_growth", "pairlist_vgrid");
  fc.unlock("slow_growth", "cutoff_atomic");
  fc.unlock("slow_growth", "coarse_grain");
  fc.unlock("slow_growth", "multi_grain");
  fc.unlock("slow_growth", "temp_berendsen");
  fc.unlock("slow_growth", "temp_nosehoover");
  fc.unlock("slow_growth", "temp_nosehoover_chains");
  fc.unlock("slow_growth", "position_rest");
  fc.unlock("slow_growth", "position_const");
  fc.unlock("slow_growth", "position_const_scaled");
  fc.unlock("slow_growth", "distance_rest");
  fc.unlock("slow_growth", "dihedral_rest");
  fc.unlock("slow_growth", "dihedral_const");
  fc.unlock("slow_growth", "jvalue_rest");
  fc.unlock("slow_growth", "perscale");
  fc.unlock("slow_growth", "rottrans");
  fc.unlock("slow_growth", "innerloop_spc");
  fc.unlock("slow_growth", "repex_temp");
  fc.unlock("slow_growth", "multicell");
  fc.unlock("slow_growth", "analysis");
  fc.unlock("slow_growth", "no_integration");
  fc.unlock("slow_growth", "stochdyn");
  fc.unlock("slow_growth", "multistep");
  fc.unlock("slow_growth", "multistep_boost");
  fc.unlock("slow_growth", "ramd");
  fc.unlock("slow_growth", "polarization_cos");
  fc.unlock("slow_growth", "polarization_cos_damped");
  fc.unlock("slow_growth", "random_gromos");
  fc.unlock("slow_growth", "random_gsl");
  fc.unlock("slow_growth", "parallel_mpi");
  fc.unlock("slow_growth", "parallel_omp");
  fc.unlock("eds", "solute");
  fc.unlock("eds", "solvent");
  fc.unlock("eds", "steepest_descent");
  fc.unlock("eds", "solute_constraint_off");
  fc.unlock("eds", "solute_shake");
  fc.unlock("eds", "solute_lincs");
  //fc.unlock("eds", "solute_flexshake"); // probably works
  //fc.unlock("eds", "solvent_constraint_off");
  fc.unlock("eds", "solvent_shake");
  fc.unlock("eds", "pressure_calculation");
  fc.unlock("eds", "pressure_scale_berendsen");
  fc.unlock("eds", "virial_off");
  fc.unlock("eds", "virial_atomic");
  fc.unlock("eds", "virial_molecular");
  fc.unlock("eds", "vacuum");
  fc.unlock("eds", "pbc_r");
  //fc.unlock("eds", "pbc_c"); // probably works - test!
  //fc.unlock("eds", "pbc_t"); // probably works - test!
  //fc.unlock("eds", "perturbation");
  //fc.unlock("eds", "perturbation_scaling");
  //fc.unlock("eds", "slow_growth");
  fc.unlock("eds", "bond");
  fc.unlock("eds", "angle");
  fc.unlock("eds", "dihedral");
  fc.unlock("eds", "improper");
  fc.unlock("eds", "crf");
  fc.unlock("eds", "lj");
  fc.unlock("eds", "com_removal");
  fc.unlock("eds", "rf_excluded"); // fix!
  fc.unlock("eds", "pairlist_standard");
  fc.unlock("eds", "pairlist_grid");
  //fc.unlock("eds", "pairlist_vgrid");
  fc.unlock("eds", "cutoff_atomic");
  //fc.unlock("eds", "coarse_grain");
  //fc.unlock("eds", "multi_grain");
  fc.unlock("eds", "temp_berendsen");
  fc.unlock("eds", "temp_nosehoover");
  fc.unlock("eds", "temp_nosehoover_chains");
  fc.unlock("eds", "position_rest"); 
  fc.unlock("eds", "position_const"); 
  fc.unlock("eds", "position_const_scaled"); 
  fc.unlock("eds", "distance_rest");
  fc.unlock("eds", "dihedral_rest");
  fc.unlock("eds", "dihedral_const");
  //fc.unlock("eds", "jvalue_rest");
  //fc.unlock("eds", "perscale");
  fc.unlock("eds", "rottrans");
  fc.unlock("eds", "innerloop_spc");
  //fc.unlock("eds", "repex_temp");
  //fc.unlock("eds", "repex_lambda");
  //fc.unlock("eds", "multicell");
  //fc.unlock("eds", "analysis");
  //fc.unlock("eds", "no_integration");
  //fc.unlock("eds", "stochdyn"); // test! probably works!
  //fc.unlock("eds", "multistep");
  //fc.unlock("eds", "multistep_boost");
  //fc.unlock("eds", "montecarlo");
  //fc.unlock("eds", "ramd");
  //fc.unlock("eds", "polarization_cos");
  // fc.unlock("eds", "polarization_cos_damped");
  fc.unlock("eds", "random_gromos");
  fc.unlock("eds", "random_gsl");
  fc.unlock("eds", "parallel_mpi");
  fc.unlock("eds", "parallel_omp");
  
  fc.unlock("mult_energy_groups", "solute");
  fc.unlock("mult_energy_groups", "solvent");
  fc.unlock("mult_energy_groups", "solvent_only");
  fc.unlock("mult_energy_groups", "steepest_descent");
  fc.unlock("mult_energy_groups", "solute_constraint_off");
  fc.unlock("mult_energy_groups", "solute_shake");
  fc.unlock("mult_energy_groups", "solute_lincs");
  fc.unlock("mult_energy_groups", "solute_flexshake");
  fc.unlock("mult_energy_groups", "solvent_constraint_off");
  fc.unlock("mult_energy_groups", "solvent_shake");
  fc.unlock("mult_energy_groups", "pressure_calculation");
  fc.unlock("mult_energy_groups", "pressure_scale_berendsen");
  fc.unlock("mult_energy_groups", "virial_off");
  fc.unlock("mult_energy_groups", "virial_atomic");
  fc.unlock("mult_energy_groups", "virial_molecular");
  fc.unlock("mult_energy_groups", "vacuum");
  fc.unlock("mult_energy_groups", "pbc_r");
  fc.unlock("mult_energy_groups", "pbc_c");
  fc.unlock("mult_energy_groups", "pbc_t");
  fc.unlock("mult_energy_groups", "perturbation");
  fc.unlock("mult_energy_groups", "perturbation_scaling");
  fc.unlock("mult_energy_groups", "slow_growth");
  fc.unlock("mult_energy_groups", "individual_lambdas");
  fc.unlock("mult_energy_groups", "bond");
  fc.unlock("mult_energy_groups", "angle");
  fc.unlock("mult_energy_groups", "dihedral");
  fc.unlock("mult_energy_groups", "improper");
  fc.unlock("mult_energy_groups", "crf");
  fc.unlock("mult_energy_groups", "lj");
  fc.unlock("mult_energy_groups", "com_removal");
  fc.unlock("mult_energy_groups", "rf_excluded");
  fc.unlock("mult_energy_groups", "pairlist_standard");
  fc.unlock("mult_energy_groups", "pairlist_grid");
  fc.unlock("mult_energy_groups", "pairlist_vgrid");
  fc.unlock("mult_energy_groups", "cutoff_atomic");
  fc.unlock("mult_energy_groups", "coarse_grain");
  fc.unlock("mult_energy_groups", "multi_grain");
  fc.unlock("mult_energy_groups", "temp_berendsen");
  fc.unlock("mult_energy_groups", "temp_nosehoover");
  fc.unlock("mult_energy_groups", "temp_nosehoover_chains");
  fc.unlock("mult_energy_groups", "position_rest");
  fc.unlock("mult_energy_groups", "position_const");
  fc.unlock("mult_energy_groups", "position_const_scaled");
  fc.unlock("mult_energy_groups", "distance_rest");
  fc.unlock("mult_energy_groups", "dihedral_rest");
  fc.unlock("mult_energy_groups", "dihedral_const");
  fc.unlock("mult_energy_groups", "jvalue_rest");
  fc.unlock("mult_energy_groups", "perscale");
  fc.unlock("mult_energy_groups", "rottrans");
  fc.unlock("mult_energy_groups", "innerloop_spc");
  fc.unlock("mult_energy_groups", "repex_temp");
  fc.unlock("mult_energy_groups", "repex_lambda");
  fc.unlock("mult_energy_groups", "multicell");
  fc.unlock("mult_energy_groups", "analysis");
  fc.unlock("mult_energy_groups", "no_integration");
  fc.unlock("mult_energy_groups", "stochdyn");
  fc.unlock("mult_energy_groups", "multistep");
  fc.unlock("mult_energy_groups", "multistep_boost");
  fc.unlock("mult_energy_groups", "montecarlo");
  fc.unlock("mult_energy_groups", "ramd");
  fc.unlock("mult_energy_groups", "polarization_cos");
  fc.unlock("mult_energy_groups", "polarization_cos_damped");
  fc.unlock("mult_energy_groups", "random_gromos");
  fc.unlock("mult_energy_groups", "random_gsl");
  fc.unlock("mult_energy_groups", "eds");
  fc.unlock("mult_energy_groups", "parallel_mpi");
  fc.unlock("mult_energy_groups", "parallel_omp");

  // unlocking features for Ewald sum electrostatics
  fc.unlock("ewald", "solute");
  fc.unlock("ewald", "solvent");
  fc.unlock("ewald", "solvent_only");
  fc.unlock("ewald", "steepest_descent");
  fc.unlock("ewald", "solute_constraint_off");
  fc.unlock("ewald", "solute_shake");
  fc.unlock("ewald", "solute_lincs");
  fc.unlock("ewald", "solute_flexshake");
  fc.unlock("ewald", "solvent_constraint_off");
  fc.unlock("ewald", "solvent_shake");
  //fc.unlock("ewald", "pressure_calculation");
  //fc.unlock("ewald", "pressure_scale_berendsen");
  fc.unlock("ewald", "virial_off");
  //fc.unlock("ewald", "virial_atomic");
  //fc.unlock("ewald", "virial_molecular");
  //fc.unlock("ewald", "vacuum");
  fc.unlock("ewald", "pbc_r");
  fc.unlock("ewald", "pbc_c");
  //fc.unlock("ewald", "pbc_t");
  //fc.unlock("ewald", "perturbation");
  //fc.unlock("ewald", "perturbation_scaling");
  //fc.unlock("ewald", "slow_growth");
  //fc.unlock("ewald", "individual_lambdas");
  fc.unlock("ewald", "bond");
  fc.unlock("ewald", "angle");
  fc.unlock("ewald", "dihedral");
  fc.unlock("ewald", "improper");
  fc.unlock("ewald", "crf");
  fc.unlock("ewald", "lj");
  fc.unlock("ewald", "com_removal");
  //fc.unlock("ewald", "rf_excluded");
  fc.unlock("ewald", "pairlist_standard");
  fc.unlock("ewald", "pairlist_grid");
  //fc.unlock("ewald", "pairlist_vgrid");
  fc.unlock("ewald", "cutoff_atomic");
  //fc.unlock("ewald", "coarse_grain");
  //fc.unlock("ewald", "multi_grain");
  fc.unlock("ewald", "temp_berendsen");
  fc.unlock("ewald", "temp_nosehoover");
  fc.unlock("ewald", "temp_nosehoover_chains");
  fc.unlock("ewald", "position_rest");
  fc.unlock("ewald", "position_const");
  fc.unlock("ewald", "position_const_scaled");
  fc.unlock("ewald", "distance_rest");
  fc.unlock("ewald", "dihedral_rest");
  fc.unlock("ewald", "dihedral_const");
  fc.unlock("ewald", "jvalue_rest");
  fc.unlock("ewald", "perscale");
  fc.unlock("ewald", "rottrans");
  //fc.unlock("ewald", "innerloop_spc");
  //fc.unlock("ewald", "repex_temp"); --probably works
  //fc.unlock("ewald", "repex_lambda"); --probably works
  //fc.unlock("ewald", "multicell"); --probably works
  //fc.unlock("ewald", "analysis"); --works if box invariant (recalculation of infl. func. necessary otherwise)
  fc.unlock("ewald", "no_integration");
  //fc.unlock("ewald", "stochdyn");
  //fc.unlock("ewald", "multistep");
  //fc.unlock("ewald", "multistep_boost");
  //fc.unlock("ewald", "montecarlo");
  //fc.unlock("ewald", "ramd"); --probably works
  //fc.unlock("ewald", "polarization_cos");
  //fc.unlock("ewald", "polarization_cos_damped");
  fc.unlock("ewald", "random_gromos");
  fc.unlock("ewald", "random_gsl");
  //fc.unlock("ewald", "eds");
  //fc.unlock("ewald", "parallel_mpi");
  //fc.unlock("ewald", "parallel_omp");
  //fc.unlock("ewald", "mult_energy_groups"); 
  //fc.unlock("ewald", "p3m");

  // unlocking features for P3M electrostatics
  fc.unlock("p3m", "solute");
  fc.unlock("p3m", "solvent");
  fc.unlock("p3m", "solvent_only");
  fc.unlock("p3m", "steepest_descent");
  fc.unlock("p3m", "solute_constraint_off");
  fc.unlock("p3m", "solute_shake");
  fc.unlock("p3m", "solute_lincs");
  fc.unlock("p3m", "solute_flexshake");
  fc.unlock("p3m", "solvent_constraint_off");
  fc.unlock("p3m", "solvent_shake");
  //fc.unlock("p3m", "pressure_calculation");
  //fc.unlock("p3m", "pressure_scale_berendsen");
  fc.unlock("p3m", "virial_off");
  //fc.unlock("p3m", "virial_atomic");
  //fc.unlock("p3m", "virial_molecular");
  //fc.unlock("p3m", "vacuum");
  fc.unlock("p3m", "pbc_r");
  fc.unlock("p3m", "pbc_c");
  //fc.unlock("p3m", "pbc_t");
  //fc.unlock("p3m", "perturbation");
  //fc.unlock("p3m", "perturbation_scaling");
  //fc.unlock("p3m", "slow_growth");
  //fc.unlock("p3m", "individual_lambdas");
  fc.unlock("p3m", "bond");
  fc.unlock("p3m", "angle");
  fc.unlock("p3m", "dihedral");
  fc.unlock("p3m", "improper");
  fc.unlock("p3m", "crf");
  fc.unlock("p3m", "lj");
  fc.unlock("p3m", "com_removal");
  //fc.unlock("p3m", "rf_excluded");
  fc.unlock("p3m", "pairlist_standard");
  fc.unlock("p3m", "pairlist_grid");
  //fc.unlock("p3m", "pairlist_vgrid");
  fc.unlock("p3m", "cutoff_atomic");
  //fc.unlock("p3m", "coarse_grain");
  //fc.unlock("p3m", "multi_grain");
  fc.unlock("p3m", "temp_berendsen");
  fc.unlock("p3m", "temp_nosehoover");
  fc.unlock("p3m", "temp_nosehoover_chains");
  fc.unlock("p3m", "position_rest");
  fc.unlock("p3m", "position_const");
  fc.unlock("p3m", "position_const_scaled");
  fc.unlock("p3m", "distance_rest");
  fc.unlock("p3m", "dihedral_rest");
  fc.unlock("p3m", "dihedral_const");
  fc.unlock("p3m", "jvalue_rest");
  fc.unlock("p3m", "perscale");
  fc.unlock("p3m", "rottrans");
  //fc.unlock("p3m", "innerloop_spc");
  //fc.unlock("p3m", "repex_temp"); --probably works
  //fc.unlock("p3m", "repex_lambda"); --probably works
  //fc.unlock("p3m", "multicell"); --probably works
  //fc.unlock("p3m", "analysis");  --works if box invariant (recalculation of infl. func. necessary otherwise)
  fc.unlock("p3m", "no_integration");
  //fc.unlock("p3m", "stochdyn");
  //fc.unlock("p3m", "multistep");
  //fc.unlock("p3m", "multistep_boost");
  //fc.unlock("p3m", "montecarlo");
  //fc.unlock("p3m", "ramd"); --probably works
  //fc.unlock("p3m", "polarization_cos");
  //fc.unlock("p3m", "polarization_cos_damped");
  fc.unlock("p3m", "random_gromos");
  fc.unlock("p3m", "random_gsl");
  //fc.unlock("p3m", "eds");
  fc.unlock("p3m", "parallel_mpi");
  fc.unlock("p3m", "parallel_omp");
  //fc.unlock("p3m", "mult_energy_groups");
  //fc.unlock("p3m", "ewald");
  
  if (fc.check()) 
    return 0;
  
  return -1;
}

