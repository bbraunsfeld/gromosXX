dnl configure.in for ddmd
dnl written by Markus Christen
dnl september, 2005

AC_PREREQ(2.58)

AC_INIT()
AC_CONFIG_SRCDIR(md/ddmd.cc)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM
AC_MSG_RESULT([Configure ddmd for $target])

AC_LANG(C++)

dnl include version information
sinclude([VERSION])

MD_VERSION=$MD_MAJOR_VERSION.$MD_MINOR_VERSION.$MD_MICRO_VERSION
AC_DEFINE_UNQUOTED(MD_VERSION, "$MD_VERSION", [MD version info])

CONF_DATE=`date`
AC_DEFINE_UNQUOTED(MD_DATE, "$CONF_DATE", [MD date (configure)])

echo ""
echo "ddmd molecular dynamics program"
echo "simple domain decomposition molecular dynamics simulations"
echo "version ${MD_MAJOR_VERSION}.${MD_MINOR_VERSION}.${MD_MICRO_VERSION}"
echo "${CONF_DATE}, ETH Zuerich"
echo ""
echo ""

AM_INIT_AUTOMAKE(ddmd, $MD_VERSION, no-define)
AM_CONFIG_HEADER(config.h)

dnl option for production builds
AC_ARG_ENABLE(debug,
  [  --disable-debug  compile without debug options],
  ,enable_debug=yes)    

AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl detect the compiler
compiler="none"
dnl need to test for intel first, as it looks nowadays
dnl suspiciously like GNU g++
if eval "test x$compiler = xnone"; then AC_PROG_CXX_INTELCC ; fi

if eval "test x$compiler = xnone"; then
	if eval "test x$GXX = xyes"; then
		compiler=gnucc
		echo "using GNU c++ compiler"
	fi
fi

if eval "test x$compiler = xnone"; then AC_PROG_CXX_KAICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SGICC   ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MWERKS  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_MSVCPP  ; fi
if eval "test x$compiler = xnone"; then AC_PROG_CXX_SUNCC   ; fi


dnl set some defaults to CXXFLAGS and LDFLAGS
extra_lib=""

dnl take out -O and -g from CXXFLAGS, CFLAGS, as these are set
dnl automagically
CXXFLAGS=`echo $CXXFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`
CFLAGS=`echo $CFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`
LDFLAGS=`echo $LDFLAGS | sed 's/\-O.//g' | sed 's/\-g//g'`

case "$compiler" in
     intel*)             # Intel C++.
       echo "Configuring for Intel C++"
       CXX_PICKY_FLAGS="-w1"
       CXX_OPTIMIZE_FLAGS="-O3 -ip -restrict -align -DNDEBUG -vec_report -openmp -openmp_report"
       CXX_DEBUG_FLAGS="-g -openmp -openmp_report"
       CXXLD="xild"

       if eval "test x$enable_debug = xyes"; then
		CXX_DEBUG_FLAGS="$CXX_DEBUG_FLAGS $CXX_PICKY_FLAGS"
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_DEBUG_FLAGS")
	        echo "configuring for debug build"
       else
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_OPTIMIZE_FLAGS")
	        echo "configuring for release build"
       fi
       AC_DEFINE_UNQUOTED(COMPILER_ICC, 1, [Intel C++ compiler])
     ;;
     sgi*)               # SGI C++  http://www.sgi.com
       echo "Configuring for SGI C++"
       AC_MSG_ERROR([No compiler flags provided for SGI C++ ])
     ;;
     gnu*)              # EGCS  http://egcs.cygnus.com/
       echo "Configuring for GNU C++"
       AC_MSG_ERROR([GNU: OpenMP support required])
       AC_DEFINE_UNQUOTED(COMPILER_GCC, 1, [GNU C++ compiler])
     ;;
     msvc*) # Microsoft Visual C++
        echo "Configuring for Microsoft Visual C++"
	AC_MSG_ERROR([Windows not supported])
        AC_DEFINE_UNQUOTED(COMPILER_MSVC, 1, [Microsoft Visual C++ compiler])
     ;;
     mwerk*)
	AC_MSG_ERROR([mwerk not supported])
     ;;
    suncc*)             # SUN studio
       echo "Configuring for SUN C++"
       dnl CXX_PICKY_FLAGS="+w2 -xcheck -xsb"
       CXX_PICKY_FLAGS="+w2"
       dnl CXX_OPTIMIZE_FLAGS="-fast -xdepend -xvector -DNDEBUG"
       CXX_OPTIMIZE_FLAGS="-fast -DNDEBUG -xopenmp"
       CXX_DEBUG_FLAGS="-g -xopenmp"
       CXXLD="$CXX"

       if eval "test x$enable_debug = xyes"; then
		CXX_DEBUG_FLAGS="$CXX_DEBUG_FLAGS $CXX_PICKY_FLAGS"
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_DEBUG_FLAGS")
	        echo "configuring for debug build"
       else
	        AC_BZ_SET_COMPILER($withval,"$CXX", "$CXX_OPTIMIZE_FLAGS")
	        echo "configuring for release build"
       fi
       AC_DEFINE_UNQUOTED(COMPILER_SUNCC, 1, [SUN C++ compiler])
     ;;
     *)
        CXXLD="$CXX"
        AC_MSG_ERROR([Compiler not recognized])
     ;;
esac

AC_PREFIX_DEFAULT(`pwd`)

dnl check header files
AC_HEADER_STDC
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

AC_CHECK_FUNCS(isinf, ,[
    AC_MSG_CHECKING([for isinf with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isinf(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISINF)],
        AC_MSG_RESULT(no))])

AC_CHECK_FUNCS(isnan, ,[
    AC_MSG_CHECKING([for isnan with <math.h>])
    AC_TRY_LINK([#include <math.h>], [float f = 0.0; isnan(f)],[
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_ISNAN)],
        AC_MSG_RESULT(no))])

dnl Checks for libraries.
AC_CHECK_LIB(m, sqrt)

AC_CACHE_SAVE
AC_SUBST(extra_lib)

AC_SUBST(MD_MAJOR_VERSION)
AC_SUBST(MD_MINOR_VERSION)
AC_SUBST(MD_MICRO_VERSION)
AC_SUBST(MD_VERSION)

AC_SUBST(compiler)

AC_DEFINE_UNQUOTED(TOP_SOURCE_DIR, "$srcdir", [top src directory])

AC_CONFIG_FILES([
	Makefile
])
	
AC_OUTPUT
